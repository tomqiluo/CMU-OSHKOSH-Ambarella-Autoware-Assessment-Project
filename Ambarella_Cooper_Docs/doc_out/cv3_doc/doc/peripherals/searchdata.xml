<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">page</field>
    <field name="name">si_sd_card</field>
    <field name="url">d0/da5/si_sd_card.html</field>
    <field name="keywords"></field>
    <field name="text">SD Card SD Card The CV5x CV7x evaluation kit EVK board has two secure digital SD interfaces one slot is used for the SD card and the other is used for the micro SD card The two SD slots are independent they have their own SD controllers The maximum frequency of the SD controller is 1 5 0 MHz The following figure shows the bottom of the CV5x EVK Timn board Figure 1-1 SD Slots Secure digital is a non-volatile memory card format developed by the SD Card Association for use in portable devices See for further details Users can also refer to for SD card standards Figure 2-1 SD SDHC SDXC MMC Cards from Different Vendors Figure 2-2 Pins on an SD Card If the application requires storing data continuously Ambarella recommends using high speed high quality SD cards High speed high quality SD cards write data in less time and require less CPU for input output I/O The following sections provide information about SD card formats speeds and design notes Ambarella does not recommend normal-speed SD cards low-speed SD cards low-speed multi-media controller MMC cards or small-capacity SD cards for typical internet protocol camera IPCAM system designs or car DV designs As an alternative Ambarella recommends using SDHC class 4 or above for continuous data writing applications If applications require long-time continuous data writing Ambarella recommends using SDHC class 4 or above for typical IP camera or car DV products Although various SD cards might be usable for use with CV5x only the SD cards in the following list are verified on the CV5x EVK board Brand Class Capacity Type Kingston Normal 2 GB MicroSD card Class 4 4 GB MicroSD card 2 GB SD card 4 GB SD card Class 4 4 GB SDHC card Kingmax Normal 2 GB MicroSD card Class 6 4 GB Micro-SDHC card SanDisk Class 2 4 GB MicroSD card Class 4 4 GB MicroSD card Normal 5 1 2 MB SD card Class 2 4 GB SDHC card Class 4 4 GB SDHC card Toshiba Class 4 4 GB MicroSD card Class 1 0 1 6 GB SDHC card Apacer 2 GB MicroSD card Class 4 4 GB MicroSD card PNY 2 GB MicroSD card Class 4 4 GB MicroSD card PQI 2 GB MicroSD card Esuninfo 2 GB MicroSD card Verbatim 2 GB MicroSD card SONY Class 4 3 2 GB MicroSD card Lenovo 1 GB SD card Adata 2 5 6 MB SD card Transcend Class 1 0 8 GB SDHC card Class 1 0 3 2 GB SDHC card For CV5 CONFIG_CV5_TIMN_SELECT_SD1 should be enabled for SDIO0 and CONFIG_CV5_TIMN_SELECT_SD2 should be enabled for SDIO1 For CV52 CONFIG_CV52_CRCO_SELECT_SD1 should be enabled for SDIO0 and CONFIG_CV52_CRCO_SELECT_SD2 should be enabled for SDIO1 For CV5 and CV52 SW2-1 SW2-2 and SW2-3 should be set to remove J18 and connect J16 when using SDIO0 SW2-4 SW3-1 and SW3-2 should be set to remove J24 and connect J22 when using SDIO1 The CV5x board recognizes the SD card after the card is inserted into the SD card slot and it is automatically mounted to Enter mount on the CV5x board to see the mounting information NTFS file system is not supported by default To get NTFS-formatted SD cards recognized by the board enable the kernel menuconfig in bellow Before removing the SD card close all files then unmount the SD card see below If the message appears check if all files on the SD card are closed and is not being accessed type to go to the root directory Format the SD card Although the SD card may arrive pre-formatted Ambarella recommends formatting the card manually to avoid potential errors and to maximize performance The SD card can be formatted to FAT32 NTFS ext3 and other file systems For SD cards equal to or less than 3 2 GB FAT32 is recommended For SD cards larger than 3 2 GB NTFS is preferred as Windows limits FAT32 partitions to 3 2 GB Windows 7 also supports exFAT but exFAT is not formally supported by the Linux kernel Ext3 is supported on Linux to support large SDHC or SDXC cards but Windows does not recognize ext3 There are three main options to format the SD cards to the required format To successfully format an SD card the write protection lock on the side of the card must be in the position SD mini and micro SD cards must be used with an adapter or specialized USB card reader when a computer is formatting them Use a format utility Most computer systems include generic formatting utilities for nearly every format of writable media For example in the Windows operating system OS users can access the format option by right-clicking an driver in the folder Use the default setting to format the SD card The SD Association SD Formatter is the recommended option for the Windows OS platform The SD Formatter is recommended because generic-format utilities are not designed to format SD cards to their official SD memory format requirements that are required to run at optimum performance on devices The SD formatter that the SD Association offers is free and is offered at SDcard.org The tool is included in the CV5x Flexible Linux SDK The tool can format an SD card to the FAT32 format and is used to create a DOS file system under Linux If users intend to use a SD card as common data storage they must format the card in their product under Linux using mkdosfs in order to ensure optimal performance An SD card that is formatted by a different tool on Windows can potentially result in lower performance Check the file system integrity The tool is used to check and repair the MS-DOS file system The source code of dosfs is available at If the file system of the SD card is correct the output message is as follows If the SD card is removed before unmounting users must check the integrity of the file system again before using the card Removing the SD card before unmounting can cause inconsistent data storage and reduce the integrity of the file system To avoid this potential issue good product design should include unmounting the SD card before removing Alternatively it should call a poweroff command to enable the system to close all open files and flush data to sync and then unmount Partition the SD card Occasionally users must partition the SD card For example if a user must format a 6 4 GB SDXC card to the FAT32 file system note the following because Windows limits FAT32 to 3 2 GB multiple partitions are required However only the first partition can be seen on Windows while Linux can display all partitions Gparted is a software utility that scans storage devices examining the data in order to detect partitions which may exist but are absent from the disk s partition tables For more details go to If users must access all partitions in Windows Ambarella does not recommend using the Linux tool to form the partition As an alternative users can attempt to port exFAT to Linux or use NTFS on the SD card to support large partitions that can be recognized on Windows In most applications the SD card is used as local storage in which data is written However data write performance and I/O CPU usage is important if the I/O CPU usage is too high it can lead to write errors or other issues Good write performance is achieved if the CPU load in the I/O operation is less than 2 0 on average in the top command when performing a continuous write to the SD card If the write performance does not meet this average it should be checked reasons for less than optimal performance could include a slow SD card too many concurrent read write operations on the SD card insufficient I/O memory buffer or bad hardware design Check write performance Check the SD card write performance using the command dd The usage of dd can be found in the Linux user manual The results are shown above the average writing speed is 1 2 8 MB 14.36 s 8.9 MB/s Improve write performance Users can optimize the writing method to improve the write performance of the FAT32 SD card If each syscall is in multiples of 1 6 KB sizes the SD card can obtain a better write performance For a larger SD card 3 2 KB or 6 4 KB is preferred A quick solution is to write in multiples of 6 4 KB to obtain optimal performance on all SD cards If writing data of a random size the FAT32 file system may include fragments The fragments will be lower than the writing speed and the I/O operation may require more CPU resources affecting the overall write performance The prototype of the write function is as follows For the FAT32 file system Ambarella suggests that the is aligned to 6 4 KB in the code meaning that if there is not enough data it is preferred to place it into a queue and add data to increase the size to 6 4 KB The size of rootfs can be very large and flash may not have sufficient space to store it In this case users can use SD card to store rootfs The following steps use the SD card as rootfs the kernel is stored in the flash and rootfs is stored in the SD card Change rootfs to the SD card Enable initramfs and build it Amba build Generate rootfs whose type is tar Set the initramfs file path Yocto build Change the ext4 and MMC drivers to instead of Build ipcam-image and burn the image to the board Build ros rootfs Untar rootfs.tar to the SD card Insert the SD card to board and reboot it The kernel is from the flash and rootfs is from the SD card is the SD card device the actual value depends on the user s system The rootfs of Amba build is different from Yocto build it is ambarella/out/amba_out/ board Question 1 Why is the system boot speed too slow when using the customerâ€™s board It seems to be related to the SD card interrupt Answer Check the hardware design If there is only one SD interface that is being used and no secure digital input output SDIO interface check the SD configuration file To verify if the slow boot issue is caused by the SD card do not insert ambarella_sd.ko Remove the following line from d/S11init If the issue is solved the slow boot was a result of SD detection If the issue is not solved proceed to the next troubleshooting step Check if fixed_cd is floating Ambarella recommends pulling down fixed_cd if SDIO WiFi is not used permanently If SDIO WiFi is reserved for future use and fixed_cd is floating disable SDIO WiFi detection on the software side Modify d/S11init as follows Question 2 Why do I/O errors occur after the message when recording to the SD card Answer cmd25 is WRITE_MULTIPLE_BLOCK As the SD device is busy no acknowledgement is passed after the defined time is out Try the following solutions to solve this issue Use 1 2 MHz as the SD clock frequency The SD clock quality is not good enough for some boards which may lead SD cards to being unrecognized Lowering the SD clock frequency fixes this issue Check the current SD clock frequency Modify ambarella/boards/ dts to use 1 2 MHz as the SD clock frequency Question 3 Why do or errors appear when data is recorded to the SD card over a long period of time Answer Large amounts of memory are used to record streams to the SD card or perform intensive SD written tests Therefore the free memory may be insufficient for other applications The errors mentioned above are caused when users attempt to use a large amount of memory To avoid this issue perform the following steps Dynamically allocate memory to create memory fragments making further memory allocation difficult or impossible Users should try allocating the memory consisting of large blocks to the applications and manage the memory internally The kernel reserves a dedicated amount of memory for itself to process jobs Release part of the memory to the user space Check the memory size 2 0 0 0 0 KB reserved for the kernel Check the free memory size Memory 3 2 4 8 8 K used 1 8 3 5 7 2 K free 0 K shared 0 K buffer 1 3 1 4 8 K cached Edit Note that the change will be forgotten after rebooting</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_miscellaneous</field>
    <field name="url">d0/dd4/si_miscellaneous.html</field>
    <field name="keywords"></field>
    <field name="text">Miscellaneous Miscellaneous This chapter provides details on the measuring video latency installing the TFTP server and the encryption engine The following sub-sections provide instructions to install the TFTP server on the PC host Install and run TFTPD TFTPD32 for Windows 3 2 bit shown below TFTPD64 for Windows 6 4 bit TFTFPD Server on Windows Set the current directory to the folder where the firmware is and set the server interface to the one connected to the board Install TFTPD-HPA Create a directory for TFTPD-HPA and put the firmware in it Configure TFTPD-HPA Start TFTPD-HPA The following sub-section provides instructions to use watchdog to avoid system hang Before using watchdog users must enable it via menuconfig Users can use following commands to let watchdog trigger system reboot when kernel panic happens</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_ethernet</field>
    <field name="url">d3/d5b/si_ethernet.html</field>
    <field name="keywords"></field>
    <field name="text">Ethernet Ethernet CV5x CV7x include two Gigabit Gbit Ethernet ports which can support 1 0 0 0 1 0 0 1 0 Mbps with full- half-duplex mode The Ethernet port can automatically negotiate with the router switch hub to set on the appropriate mode or manually set any mode Display the standard information for devices with the ethtool For CV5x CV7x the IP address of eth0 is set to 10.0.0.2 default The IP address can be modified to another IP address The IP address of the second Ethernet port which is not defined by default can also be configured in the same file Set up the PC First users must enable on a PC The following text explains how to enable jumbo frames on Windows 1 0 Figure 3-1 Enable Jumbo Frame on a PC Ubuntu users should use the following command The Ethernet throughput can be tested using iperf3 In this case PC acts as a server Not all the Ethernet cards on a PC are compatible with jumbo frames Users should take care to ensure that their Ethernet cards have the desired performance Setting up the EVK board CV5x supports long frames which are called jumbo frames This is advantageous for the Gbit Ethernet because it can function more efficiently with long frames This feature is enabled by default The limit for maximum transmission unit MTU is 8 KB use to change the size of the MTU Select the iperf3 tool Change the size of the MTU Use the iperf or iperf3 tool The evaluation kit EVK board sends the data then the PC receives it Use the iperf or iperf3 tool The PC sends the data then the EVK board receives it Preparation One 1 0 0 0 1 0 0 1 0 Mbps switch One PC with Ethernet CV5x platform Build iperf into the CV5x platform Connect the PC and the CV5x Ethernet ports to 1 0 0 Mbps and switch with an Ethernet cable When CV5x is set on 1 0 0 Mbps full-duplex mode the PC should also be set on 1 0 0 Mbps full-duplex mode This is similar to half-duplex mode Full-Duplex Mode Set the PC Ethernet to 1 0 0 Mbps full-duplex mode Set the CV5x Ethernet to 1 0 0 Mbps full-duplex mode Use to test the transmission control protocol TCP user datagram protocol UDP throughput performance Half-Duplex Mode Set the PC Ethernet to 1 0 0 Mbps half-duplex mode Set the CV5x Ethernet to speed 1 0 0 Mbps half-duplex mode Use to test the TCP UDP throughput performance Connect the PC and the CV5x Ethernet port to 1 0 0 0 1 0 0 1 0 Mbps and switch with an Ethernet cable When CV5x is set to 1 0 Mbps full-duplex mode the PC should be set to 1 0 0 Mbps full-duplex mode correspondingly This is similar to the half-duplex mode Full-Duplex Mode Set the PC Ethernet to the 1 0 0 Mbps-speed with full-duplex mode Set the CV5x Ethernet to 1 0 Mbps speed with full-duplex mode Use to test TCP UDP throughput performance Half-Duplex Mode Set the PC Ethernet to 1 0 0 Mbps speed with half-duplex mode Set the CV5x Ethernet to 1 0 Mbps speed with half-duplex mode Use to test the TCP UDP throughput performance The following table provides the reference Ethernet throughput test results Protocol Speed Duplex TCP Result 1 0 0 Mbps full 7 7 Mbps Half 77.1 Mbps 1 0 0 0 Mbps Full 8 3 5 Mbps Protocol Speed Duplex UDP Result(Mbps,Packat Loss) UDP 1 0 0 Mbps full 94.41 0 Half 9 4 0 1 0 0 0 Mbps Full 8 5 2 0.02 Virtual local area networks VLANs are logical groupings of devices in the same broadcast domain VLANs are usually configured on switches by placing some interfaces into one broadcast domain and some interfaces into another Each VLAN acts as a subgroup of switch ports in an Ethernet LAN VLANs can spread across multiple switches with each VLAN being treated as its own subnet or broadcast domain This means that frames broadcasted onto the network will be switched only between the ports within the same VLAN The following provides steps to show VLAN connection between two EVK boards One EVK board Another EVK board There should be no communication between VLAN20 and VLAN15 but the test results show that there is communication in different VLANs which is unexpected Figure 6-1 VLAN Connect Between Two EVK Boards Test Result In order to prevent different VLAN ports from communicating with each other reverse path filtering is a mechanism adopted by the Linux kernel as well as most networking devices to verify if a receiving packet source address is routable Enable the reverse path in the Linux kernel The two Ethernet ports can function simultanously either in the same domain or different domains An example for the two ports in the same domain is below For the case of two ports in the same domain Ambarella recommends adding a switch hub router into the network so that the packet can be forwarded correctly If two ports are in the same domain the system chooses an interface with smaller matric values for network traffic automatically Below is an example of two ports in different domains</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">peripherals_main_page.h</field>
    <field name="url">d3/d75/peripherals__main__page_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_fs</field>
    <field name="url">d4/d64/si_fs.html</field>
    <field name="keywords"></field>
    <field name="text">File System File System Unsorted block image UBI file system UBIFS is a successor to JFFS2 UBIFS functions with a UBI device which itself is on top of a memory technology device MTD This means that with UBIFS MTD is not used directly There are two major advantages to using UBIFS rather than JFFS2 UBIFS supports write caching and tolerates unclean reboots UBIFS tends to perform better with fast input output I/O and fast mount when compared to JFFS2 for large NAND flash devices For more information about UBIFS refer to the following links For more information about UBI refer to the links below Ambarella recommends using UBIFS as the default root file system rootfs in the software development kit SDK Execute the following command for CV2x SDK 3 0 Amba Build Ambarella Firmware Configuration AMBoot boot loader Common Boot Options Booting cmdline console ttyS0 ubi.mtd lnx root ubi0 rootfs rw rootfstype ubifs init can be an input for this configuration It will be brought into effect as an alternative to the boot arguments bootargs defined in device trees DTS If this configuration is left blank the bootargs in DTS will function By default boot arguments are defined in the DTS file ambarella/boards/cvx_board/bsp/cvx_board.dts bootargs Ambarella Firmware Configuration AMBoot boot loader Linux Partition Ambarella File System Configuration Linux Root File System X UBIFS Execute the following command Execute the following command Execute the following command for Cooper SDK Amba build boot boot Bootloader Ambarella Firmware Configuration AMBoot Options Common Boot Options Booting cmdline console ttyS0 ubi.mtd lnx root ubi0 rootfs rw rootfstype ubifs init can be input to this configuration It will be brought into effect rather than the bootargs defined in DTS If this configuration is left blank the bootargs in DTS will function By default boot arguments are defined in the DTS file ambarella/boards/cvx_board/bsp/cvx_board.dts bootargs boot boot Bootloader Ambarella Firmware Configuration Firmware Options Linux Partition rootfs rootfs rootfs/system Linux Root File System UBIFS Execute the following command Execute the following command Execute the following command for Cooper SDK Yocto build meta-ambabsp recipes-bsp boot meta-ambabsp/recipes-bsp/boot Bootloader Ambarella Firmware Configuration AMBoot boot loader Common Boot Options Booting cmdline console ttyS0 ubi.mtd lnx root ubi0 rootfs rw rootfstype ubifs init can be input to this configuration It will be brought into effect rather than the bootargs defined in DTS If this configuration is left blank the bootargs in DTS will function By default boot arguments are defined in the DTS file ambarella/boards/cvx_board/bsp/cvx_board.dts bootargs meta-ambabsp recipes-bsp boot meta-ambabsp/recipes-bsp/boot Bootloader Ambarella Firmware Configuration Firmware Options Linux Partition meta-ambabsp recipes-bsp amrootfs meta-ambabsp/recipes-bsp Linux Root File System UBIFS Execute the following command Execute the following command UBI utils is compiled from the mtd-utils project Execute the following command The following steps must be performed on a partition that does not include critical system information To determine the current partition on the board use cat The size of this partition must be larger than 2 0 MB If this is the first time using the UBIFS partition such as MTD6 the following procedure is required usr_a and usr_b are volume names Copy a file to the UBIFS directory After the board reboots Test UBIFS Because the file is buffered in memory after the test reboot before any additional round of testing Journalling flash file system version 2 JFFS2 is a log-structured file system for use with flash memory devices Rather than using a type of translation layer on flash devices to emulate a normal hard drive it places the file system directly on the flash chips The latest JFFS2 code can be found at Execute the following command Ambarella Firmware Configuration AMBoot boot loader Common Boot Options Boot cmdline Ambarella Firmware Configuration AMBoot boot loader Linux Partition Ambarella File System Configuration Linux Root File System X JFFS2 Execute the following command Execute the following command If this is the first time that the JFFS2 partition such as MTD6 is used the following procedure is required Copy the file to the JFFS2 directory After the board reboots Test JFFS2 The file is buffered in memory after the test reboot before another round of testing is performed Ext4 is the latest generation of the Ext3 file system Unlike the upgrade from Ext2 to the Ext3 file system the on-disk format of Ext4 is not forward-compatible with Ext3 as it is based on extent maps and supports 4 8 bit physical block numbers Ext4 supports delayed allocation persistent pre-allocation high-resolution time stamps and a number of other features that improve the performance and speed of FSCK time For more information refer to the web page Ambarella recommends using the Ext4 file system with embedded multi-media card controller eMMC flash Execute the following command Ambarella Firmware Configuration AMBoot boot loader Boot Media Boot From eMMC Ambarella Firmware Configuration AMBoot boot loader Common Boot Options console ttyS0 noinitrd root rw rootfstype ext4 init Booting cmdline Ambarella Firmware Configuration AMBoot boot loader Linux Partition Ambarella File System Configuration Linux Root File System X EXT4 Execute the following command Execute the following command ExFAT is an extension of the traditional FAT file system and is optimized for flash memory such as USB flash drives and SD cards Compared to FAT ExFAT has better scalability to large disk sizes and more efficient write operation ExFAT contains features such as boundary alignment for file system structures and OEM parameters that makes ExFAT flash-friendly For more information refer to the web page Ambarella recommends using the ExFAT file system with USB flash drives and SD cards Execute the following command Execute the following command</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_jtag</field>
    <field name="url">d4/dcd/si_jtag.html</field>
    <field name="keywords"></field>
    <field name="text">JTAG JTAG Joint test action group JTAG is used for testing interconnects and functionality on integrated circuit ICs In this document users are provided with setup details and also provided with details on how to run JTAG This chapter provides instructions to set up the JTAG Code Viser with CVD64 on ArmÂ® CortexÂ® A53 platforms including S5 S5L CV2 CV22 CV25 CV25M S6LM and ArmÂ® CortexÂ® A76 platforms including CV5 The following instruction describes the use of Code Viser and CVD64 on CV5 as an example The same procedures apply to the other ArmÂ® CortexÂ® A53 and ArmÂ® CortexÂ® A76 platforms Connect the Code Viser to the EVK board and PC The Code Viser connects to the PC host with a USB cable to run Windows It connects to the EVK board JTAG slot via the JTAG cable Connect the Code Viser to the EVK Board Install CVD64 CVD64 version 1.42 is recommended Figure After the CVD is installed successfully Visual C++ 2 0 0 5 Redistributable for running CVD64 is automatically installed Let the system complete the installation If possible restart the computer after the system finishes installing CVD64 CVD64 Version 1 42 Install the USB driver for Code Viser After CVD64 is installed users need to install the USB driver for Code Viser manually The driver file is in JnDTech Then connect Code Viser to the PC and check if the driver is installed successfully as shown in Figure CodeViser Driver Location CodeViser Driver Start CVD64 and click Then choose the script Ambarella_ARM_A53_CVD64.csf The contents of the script file is as shown below Load CortexÂ® A53 Script File Click the button in the script window to run the script and start debugging When it runs successfully the system on the EVK board will halt Click to resume the system CortexÂ® A53 Debug and Recover Start CVD64 and click Then choose the script Ambarella_ARM_A76_CVD64.csf The contents of the script file is as shown below Load CortexÂ® A76 Script File Click the button in the script window to run the script and start debugging When it runs successfully the system on the EVK board will halt Click to resume the system CortexÂ® A76 Debug and Recover</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">peripherals_chapters_page.h</field>
    <field name="url">d5/d14/peripherals__chapters__page_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">define PHY_PIPE_CMN_CTRL1 define PHY_PIPE_LANE_DSBL define PHY_PLL_CFG define PHY_PIPE_USB3_GEN2_PRE_CFG0 define PHY_PIPE_USB3_GEN2_POST_CFG0 cdns_torrent_phy_init phy phy regmap cdns_phy regmap_phy_pcs_lane_cdb inst mlane regmap_write regmap regmap cdns_phy regmap_phy_pcs_common_cdb regmap_write regmap endif index c2101fe7 a532ce93a28dd a drivers reset reset amba cdns phy c b drivers reset reset amba cdns phy c define PCIEC_APB_CORE_RATIO_4 define PCIEC_APB_CORE_RATIO_MASK GENMASK define PCIEC_MISC_RESET GENMASK define PCIEC_GEN_RESET GENMASK define PCIEC_LANE_RESET GENMASK PMA_CTRL_REG amba_phyrst_pcie_deassert reset_controller_dev rcdev unsigne CDSN_PHY_LINK_RESET CDSN_PHY_RESET regmap_clear_bits phyrst regmap phyrst offset C_CTRL_REG PCIEC_GEN_RESET regmap_clear_bits phyrst regmap phyrst offset C_CTRL_REG PCIEC_LANE_RESET regmap_clear_bits phyrst regmap phyrst offset P_CTRL_REG PCIEP_PHY_RESET phy_id regmap_clear_bits phyrst regmap phyrst offset C_CTRL_REG PCIEC_MISC_RESET regmap_set_bits phyrst regmap phyrst offset C_CTRL_REG PCIEC_LINK_TRAIN_EN Users can check the PCIe status to see the lanes are limited to a single lane CV5 an example devmem BIT is b00 x1 if BIT is b01 x2 if BIT is b10 x4 Depending on the specific board design it may be necessary to supply power to the slot during the PCIe controller boot on process This can be verified within AMBoot instance users are utilizing GPIO to manage the power the slot amboot gpio hw operate exclusively as a GPIO instead of repurposing it alternative functions amboot gpio set pull up</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_temperature</field>
    <field name="url">d7/de9/si_temperature.html</field>
    <field name="keywords"></field>
    <field name="text">Temperature Temperature This section describes how to obtain CV5x junction temperature Update the analog-to-digital ADC node in the CV5 dtsi to enable the ADC and temperature to voltage(T2V) Get the temperature in the system</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">pci_express</field>
    <field name="url">d8/d69/pci_express.html</field>
    <field name="keywords"></field>
    <field name="text">PCI Express PCI Express Ambarella systems on chip SoCs CV5 and CV72 include one Gen3x4 dual-mode controller and CV3 includes three Gen3x4 dual-mode controllers CV3 includes one Gen5x4 dual-mode controller and two Gen5x1 dual-mode controllers Devices such as Ethernet cards and non-volatile memory express NVMe disks can be connected to the system via peripheral component interconnect express PCIe ports NVMe example NVMe example NVMe example NVMe example The CV5 Timn evaluation kit EVK has a dedicated NVMe solid-state drive SSD slot for SSD disks Other general PCIe devices can be connected to the system using the general PCIe ports on the top side of the EVK board All of Ambarella s PCIe controllers can function as either a root complex RC or an endpoint EP but only one mode can be active at a time and cannot be switched during runtime For more details on the endpoint function EPF refer to the Documentation/arm/ambarella/ directory within the Linux kernel source tree Some drivers for PCIe Ethernet are already in the kernel The two drivers below are selected by default If NVMe SSD is not automatically loaded users can enable it using the command below The following is the performance of NVMe SSD on the CV5 EVK Read 3432.9 MB/s Write 2754.5 MB/s Test command fio direct 1 iodepth 1 2 8 rw write ioengine libaio bs 1 2 8 k numjobs 1 time_based 1 runtime 1 0 group_reporting filename name test fio direct 1 iodepth 1 2 8 rw write ioengine libaio bs 1 2 8 k numjobs 1 time_based 1 runtime 1 0 group_reporting filename name test Read Throughput Write Throughput DDR Frequency Lane Number NVMe Model SoC Board 3 2 6 1 MB/s 2 4 1 8 MB/s 3.192 G 4 Samsung 9 8 0 CV5 3 4 6 7 MB/s 2 4 1 6 MB/s 3.192 G 4 Samsung 9 7 0 CV5 8 4 4 MB/s 7 9 3 MB/s 3.192 G 1 Samsung 9 7 0 CV72 Gage 8 4 5 MB/s 8 0 7 MB/s 3.192 G 1 Samsung 9 7 0 CV72 Xiezhi At present CV72 is the only platform capable of supporting PCIe graphics processing units GPUs due to its extensive advanced extensible interface AXI memory space for PCIe This feature is crucial for most GPUs as they typically require at least 2 5 6 MB of 6 4 bit prefetchable memory space Ambarella has tested AMD RV620 PRO Radeon HD 3 4 7 0 on CV72 As shown above the Radeon driver is employed in this case However if users possess other ATI cards that are compatible with amdgpu Ambarella recommends using them instead The amdgpu driver offers more advanced memory management features such as GTT support The GPU may require a large amount of VRAM space which is beyond the amount of Ambarella SoC PCIe AXI space that is supported For this case users should limit VRAM by adding to the kernel commandline however this is not sufficient because it only limits VRAM usage and would still require 8 1 9 2 M Therefore users should disable bar resize Note that if the amdgpu driver used is not gmc_v8_0.c users should remove the bar resize function in the correct gmc_vN_M.c If users encounter error messages such as ring gfx test failed 1 1 0 or radeon ring 0 test failed there is an issue with reading or writing to the ring buffer also known as the GPU s command buffer The specific cause of these errors can vary depending on the platform and other factors such as support for ExtTag by the upstream switch For the Ambarella platform this issue arises due to a limitation with the Cadence Gen3 PCIe controller This controller does not permit variations from its maximum pcie_master_AXI_ARSIZE value of four unless pcie_master_AXI_ARLEN is zero in a request This means that if users must read or write memory-mapped input output MMIO to the endpoint s bar they are required to use writel readl operations The use of memcpy memcpy_to fromio readq writeq operations is not allowed under these circumstances At present the radeon amdgpu driver uses the memcpy_toio memcpy_fromio functions for the ring buffer To address this issue these functions should be replaced with the 3 2 bit version of memcpy Users can easily implement this change by applying the modifications found in Coreforge s PR which introduces the 3 2 bit memcpy Alternatively users can utilize the memcpy_fromio_ambarella function that the Ambarella kernel provides It is important to note that this limitation does not only impact kernel space drivers updates to memcpy in the userspace are also necessary The GLIBC s memcpy for aarch64 is implemented in assembly and uses single instruction multiple data SIMD stp/ldp operations where possible A solution could be to implement a version of memcpy that copies four-byte chunks at one time similar to how memcpy_fromio_ambarella functions An example of how to perform this operation can be found in this Stack Overflow post To compile the shared library use the following flags fPIC g fno-inline fno-builtin-inline fno-inline-functions fno-builtin shared Users can test this library by using the LD_PRELOAD command followed by the user application Alternatively users can make the library globally available by adding its full path to the so.preload file As pointed above it is the Ambarella controller s limition but only the GPU driver requires this change because drivers such as NVMe have performed similar changes in The commit changes how NVMe storage devices are managed by the kernel specifically in relation to how 6 4 bit read write operations are managed The commit modifies the kernel s NVMe driver to use read write operations for certain storage controllers that may require ordered split transfers even on 6 4 bit machines This includes for example the NVMe controller found in certain models of Appleâ„¢ s MacBookâ„¢ The commit changes several instances in the code where readq and writeq functions were used to instead use lo_hi_readq and lo_hi_writeq respectively These changes should ensure ordered split transfers on 6 4 bit platforms which helps avoid potential issues with the aforementioned controllers Users are not required to modify the NVMe driver If desired users can attempt to undo the changes made by the commit using the following method Users will then notice that the NVMe controller ceases to function properly Users can also utilize the Ambarella pci-amba-test to validate the presence of this issue When running amba-pcitest b 0 users can see the following This also implies that attempts to access the 6 4 bit bar will be unsuccessful Some drivers for PCIe Ethernet are already in the kernel The two drivers below are selected by default After building the binary and flashing it to the EVK board the command below can be used to enable the hardware IntelÂ® PCIe Ethernet card board modprobe ixgbe InterruptThrottleRate 1 IntMode 0 Marvel PCIe Ethernet card board modprobe atlantic aq_itr 1 The table below provides PCIe Ethernet performance data Connection Throughput Gbits/s PC CV5 Timn 9.38 CV5 Timn CV5 Timn 3.71 Users can refer to Wikipedia for details If users are testing a new board with a PCIe controller acting as either an RC or EP and you encountered the issue mentioned in the title ensure that the signal lengths of the PCIe connector s P and N are the same If they are different prioritize fixing this issue by replacing the connector with one which has the same length If using a CV5 CV52 EVK verify that the PCIe switch is attached to the board Â  switch switch switch switch If the PCIe switch does not exist enable CONFIG_AMBOOT_PCIE_MODE_RC_QUIRK CONFIG_AMBOOT_PCIE0/1/2_MODE_RC_QUIRK for CV3 under the Ambarella software development kit SDK If the steps above do not resolve the issue check the PCIe status register PCIe status reg CV5 devmem 0 x20e0024198 CV3 PCIe0 devmem 0 xffe00241ac PCIe1 devmem 0 xffe00241b0 PCIe2 devmem 0 xffe00241b4 CV72 devmem 0 xffe003e1ac If all values are 0 verify that the PCIe controller driver has been probed In SDK 2.0 the CV52 PCIe has not been checked because its compatible is but the driver uses As a result the driver is not probed and the register receives all 0 values Update the compatible to and try again Get bit 3 2 If the value is not 0 b11 linkup completed it indicates that the controller linkup has not succeeded It is possible that some SoC pins are broken Some CV5 boards have this issue if so request a new CV5 board If the status register is functional verify that the PCIe slot powers on For example the CV5 EVK uses a PCA953x GPIO 6 for slot power control If the user s GPIO setting is incorrect and the slot does not have power the endpoint cannot be recongized Ambarella s PCIe controller can function as a regular endpoint For the CV3 bring-up board BUB pull up U38.47 to SYS_VCC1V8 with 1 0 K Pull up U38.46 to SYS_VCC1V8 with 1 0 K Pull up U38.44 to SYS_VCC1V8 with 1 0 K For the CV5 BUB Pull up U60.pin37 PCIE_PERST_N to SYS_VCC1V8 with 1 0 K The CV5 BUB default is as follows R59 R61 is fitted and R62 R63 is removed XXX this step should only be required if the PC is the root complex Â Â RemoveÂ R86 R88 R87 and R90 thenÂ wireÂ twoÂ linesÂ as shown in the pictures below to the user s external clock from the PCIeÂ connector cv5 ep png cv5 ep png cv5 ep png cv5 ep png cv5 ep png cv5 ep png cv5 ep png cv5 ep png If users set up the EP CV72 after the RC boots up which is the recommended method they can ignore this section The rest of this section is only for situations where the EP is configured before RC bootup Unlike CV3 CV5 the CV72 EVK does not include level shift Perst is asserted when the RC links up and some registers such as the EP trans IB register are cleared To fix this issue Perst must be disabled This can be performed for example by removing R1125 from the CV72 EVK Note that with this rework if CV72 functions as an RC the endpoints may malfunction due to missing fundmental resets For example NVMe will receive a timeout when reading writing Users should only disable Perst remove R1125 or add a diode when CV72 functions as an EP and configures its EPF before RC bootup If the user wants to use a PC as the RC and the Ambarella chip s PCIe controller as the EP the EP must use the RC s clock source To find the root cause users can refer to here CV3 integrates three PCIe controllers PCIe0 PCIe1 and PCIe2 To configure the connections for the BUB s PCIe2 follow the steps below Disconnect resistors R411 R413 R414 and R415 Connect the A13 and A14 pins on the PCIe2 connector PCIe Port-2 to CV3 Connect A13 to the PCIEP2_CK_REFREFCLK_P clock Connect A14 to the PCIEP2_CK_REFREFCLK_N clock Refer to the images below for more information cv3 pcie2 external refclk cv3 pcie2 external refclk cv3 pcie2 external refclk cv3 pcie2 external refclk cv3 pcie2 external refclk cv3 pcie2 external refclk cv3 pcie2 external refclk cv3 pcie2 external refclk For PCIe0 follow the steps below to modify the connections Disconnect resistors R401 R402 R403 and R405 Connect the A13 and A14 pins on the PCIe0 connector PCIe Port-0 to CV3 Connect A13 to the PCIEP0_REFCLK_P R401 clock Connect A14 to the PCIEP0_REFCLK_N R402 clock For PCIe1 follow the steps below to modify the connections Disconnect R406 R407 R408 and R409 Connect the A13 and A14 pins on the PCIe1 connector PCIe Port-1 to CV3 Connect A13 to the PCIEP1_REFCLK_P R406 clock Connect A14 to the PCIEP1_REFCLK_N R407 clock When connecting the reference clock ensure that it is connected to the end of the original resistor that is furthest from the clock chip CV72 EVK Ga cv72 ep connector clock cv72 ep connector clock cv72 ep connector clock cv72 ep connector clock cv72 ep connector clock cv72 ep connector clock cv72 ep connector clock cv72 ep connector clock CV5 performs similar rework to CV3 CV72 The clock generator is located on the board rather than on the chip All Shanghai EVKs can use I2C to read write the clock generator PCIe switch for example to disable the clock Taiwan CV72 and CV5 BUBs have no such support The Taiwan CV3 BUB supports I2C clock generator read write Users may have a variety of reasons for preferring to use a single lane even if the SoC provides four PCIe lanes For instance in certain cases users may only require single-lane throughput for specific applications such as serial adanced technology attachment SATA controllers Users can check the PCIe status register to see if the lanes are limited to a single lane using CV5 for an example devmem 0 x20e0024198 if BIT(5:4) is 0 b00 x1 if BIT(5:4) is 0 b01 x2 if BIT(5:4) is 0 b10 x4 Depending on the specific board design it may be necessary to supply power to the slot during the PCIe controller boot-on process This can be verified within AMBoot for instance if users are utilizing GPIO 6 8 to manage the power for the slot</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_bluetooth</field>
    <field name="url">d8/d73/si_bluetooth.html</field>
    <field name="keywords"></field>
    <field name="text">Bluetooth Bluetooth The CV series system on chip SoC platform supports Bluetooth by the Universal asynchronous receiver transmitter UART interface The CV series SoC platform can support UART BT products This section details the following Broadcom BCM43340 UART BT 1 x1 abgn dual band SDIO WiFi refer to Broadcom BCM43438 UART BT 1 x1 bgn SDIO WiFi refer to Build the UART BT driver Select the BT firmware For CV2x SDK 3 0 Amba build For Cooper Amba build For Cooper Yocto build Select the BT firmware For SKD 3 0 Amba build For Cooper Amba build For Cooper Yocto build Select the Bluez stack Reset BT_RST_N On a reference board BT_RTS_N connects to GPIO 1 0 1 it can be changed according to the hardware Otherwise it can also be reset manually on the BT EVK Load the BT firmware BCM43340 BCM43438 After brcm_patchrm is run the following message will be printed on the console Obtain the bluetooth interface information and make the device discoverable Scan the bluetooth devices Establish a connection between the bluetooth board card and bluetooth headset Configure PulseAudio of the bluetooth headset 0 0 1 1 6 7 0 0 2 1 C0 is sample BT MAC change it according to the BT Play the audio file through the bluetooth headset</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_spi</field>
    <field name="url">da/dcf/si_spi.html</field>
    <field name="keywords"></field>
    <field name="text">SPI SPI The serial peripheral interface SPI is a synchronous full-duplex serial communication interface used for short-distance communication SPI uses a masterâ€“slave architecture and uses separate clock and data lines along with a chip select line to choose the device that users wish to talk to The SPI bus specifies four logic signals SCLK Serial clock output from master MOSI Master out slave in data output from master MISO Master in slave out data output from slave CS Chip slave select output from master to indicate that data is being sent Figure 1-1 Connecting Map between SPI Interfaces The SPI bus has four modes 0 1 2 3 that correspond to four possible clocking configurations of the clock polarity CPOL and the clock phase CPHA Mode 0 CPOL 0 The clock is idle when low CPHA 0 Data is sampled on the leading edge rising edge of the clock pulse and shifted out on the trailing edge falling edge of the clock pulse Mode 1 CPOL 0 CPHA 1 CPOL 0 The clock is idle when low CPHA 1 Data is sampled on the trailing edge falling edge of the clock pulse and shifted out on the leading edge rising edge of the next cycle clock pulse Mode 2 CPOL 1 CPHA 0 CPOL 1 The clock is idle when high CPHA 0 Data is sampled on the leading edge falling edge of the clock pulse and shifted out on the trailing edge rising edge of the clock pulse Mode 3 CPOL 1 CPHA 1 CPOL 1 The clock is idle when high CPHA 1 Data is sampled on the trailing edge rising edge of the clock pulse and shifted out on the leading edge falling edge of the next cycle clock pulse Figure 1-2 SPI Mode Introduction CV2x chips provide four SPI masters provding up to fourteen devices in total and one decicated slave While CV5x chips provide six SPI masters providing up to sixteen devices in total and one decicated slave The SPI interface provides interrupt capability various transfer modes and serial master operations They both provide Motorola interface capability This chapter describes the setup process of the SPI master and slave on Ambarella systems on chip SoCs An Ambarella SoC and one microcontroller unit MCU are used for this demo case The user can also use two Ambarella SoCs to perform such a test by directly connecting their SPI interfaces The baud rate of the SPI master can reach up to 2 0 MHz The SPI master can be used to transfer data in full-duplex or half-full duplex mode Ambarella recommends that users use the SPI mode 3 to transfer data between SPI devices because SPI mode 3 is fully tested by Ambarella To set up the SPI master follow the steps below Modify ambarella/boards/ board_name board_name dts to enable the SPI master Use cv25_bigeye for example Add Ambarella SPI driver support in the kernel For CV2x SDK 3 0 Amba Build For Cooper Amba and Yocto Build Add the SPI test application into the root file system Rootfs For CV2x SDK 3 0 Amba Build For Cooper Amba Build For Cooper Yocto Build Perform the SPI master test Run the SPI slave test application first on the MCU side Then load the SPI master driver and run the SPI master test application on the Ambarella SoC side When using the option g the SPI master test application can run first because it can wait for the SPI slave device to be ready to transfer data According to the SPI slave Linux driver designed by Ambarella there are two main points of which users must be aware when using the SPI slave One extra general purpose input output GPIO is introduced to inform the SPI master that the SPI slave is ready and the transfer can be performed according to the design of the SPI slave Linux driver The maximum clock frequency supported by the SPI slave is 8 MHz The user cannot set the clock higher than 8 MHz The actual transmission speed primarily depends on the size of the SPI transfer buffer and the length of the data being transmitted The longer the data being transmitted is within certain limits the better To set up the SPI slave follow the steps below Modify ambarella/boards/ board_name board_name dts to enable the SPI slave Take cv25_bigeye for example The spi3 above should be disabled because spi3 and spi slave share the same interfaces according to the cv25_bigeye schematic diagram Add Ambarella SPI slave driver support in the kernel Add the SPI test application into Rootfs The SPI slave shares the same test application with the SPI master Perform the SPI slave test Configure the SPI master to be triggered by the notify-gpio rising edge on the MCU side MCU setup is not described in detail in this document By detecting the notify-gpio rising edge the MCU SPI master will start the transfer automatically whenever the SPI slave is ready Load the SPI slave driver and run the SPI slave test application on the Ambarella SoC side The example above is a demo case Users can run the SPI slave test application first and then run the SPI master test application according to their demands</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_ptp</field>
    <field name="url">db/d1c/si_ptp.html</field>
    <field name="keywords"></field>
    <field name="text">PTP PTP Precision time protocol PTP is defined in IEEE 1 5 8 8 as pecision clock synchronization for networked measurements and control systems and was developed to synchronize the clocks in packet-based networks that include distributed device clocks of varying precision and stability PTP can transmit over user datagram protocol UDP media access control MAC protocol or multi-protocol label switching MPLS To distribute time PTP devices are made up primarily of two main roles Master the entity distributing time to slaves A master can also be a grand master GM that receives its time from a primary reference source typically a GPS satellite signal Slave the remove device that synchronizes to the master Benefits of PTP Standardized protocol IEEE1588v2 Sub-microsecond accuracy and precision Low cost and easy setup in existing Ethernet networks Limited bandwidth required for PTP data packets Capability to autonomously decide GM clocks using a best master clock algorithm BMCA Synchronization of the clocks in local area accounts for path delays Hardware timestamps which improve the accuracy of time synchronization On-board clock included with hardware PTP which can be synchronized by or synchronized to other clock sources such as GPS and NTP enabling increasing clock accuracy There are two applications for PTP on the Ambarella platform ptp4l and phc2sys ptp4l Implements PTP and ordinary clocks Through hardware timestamps this application synchronizes PTP hardware clocks from physical MAC to remote master clocks phc2sys Based on hardware timestamp this application synchronizes clocks from the system to PTP hardware Prepare two Ambarella evaluation kit EVK boards One is used as master clock and the other as a slave Use a network cable to connect the boards and configure different IP addresses default is 10.0.0.2 For CV2x SDK 3 0 Amba Build For Cooper Amba Build For Cooper Yocto Build For CV2x SDK 3 0 Amba Build For Cooper Amba Build For Cooper Yocto Build When the building operation completes burn the firmware to the respective EVK board When the system boots up run the following commands on the EVK board with master clock to synchronize the clock to Ethernet The slave device will be synchronized via PTP Run the following commands on the slave device to synchronize the system clock using PTP While system time is modified on the master device slaves will be synchronized slowly Because the default adjusting step is 2 4 ms the change step should be minimal Users can increase or decrease by 1 0 0 seconds based on the current time</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_wifi</field>
    <field name="url">db/d30/si_wifi.html</field>
    <field name="keywords"></field>
    <field name="text">WiFi WiFi The computer vision CV series system on chip SoC platform supports WiFi with USB and secure digital input output SDIO interfaces For USB WiFi contact the Ambarella support team for further information Depending on the WiFi driver and firmware FW copyright and support the standard software development kit SDK may not include WiFi drivers or WiFi firmware Users can contact the Ambarella support team with any questions This chapter introduces SDIO WiFi connected to the SoC Battery-powered IP BPI evaluation kit EVK boards use an internet of things IoT WiFi microcontroller unit MCU ingore this chapter and refer to the document Ambarella BPI Suite Getting Started Guide for details The board supports many SDIO WiFi products listed as follows Table 1 1 SDIO WiFi Support List WiFi Vendor Chip Name Broadcom BCM43362(AP6181) BCM43341(AP6441) BCM43340(AP6234) BCM43438(AP6212) BCM43438(AP6452) BCM43438A1(AP6212A) BCM43436(AP6236) BCM43455(AP6255) BCM43456(AP6256) BCM43456(AP6745) BCM43751(AP6271S) BCM43752(AP6275S) BCM43241(AP62X2) BCM4356(AP6356S) BCM4359(AP6359SA) BCM4359(AP6398S) BCM43012(AP6201) BCM430132(AP6203) BCM43143 Infineon CYW4343W CYW43438 CYW43439 CYW43012 CYW43455 CYW4373 CYW4356 CYW54590 CYW54591 CYW55571 CYW55572 CYW55573 Some modules from WiFi vendors are as follows Figure 1-1 Broadcom BCM43340 AP6234 SDIO WiFi UART BT Figure 1-2 Broadcom BCM43362 AP 6181 SDIO WiFi Figure 1-3 Broadcom BCM43438 AP6212 SDIO WiFi UART BT Figure 1-4 Broadcom BCM43752 AP6275S SDIO WiFi Figure 1-5 Infineon CYW4373 SDIO WiFi Figure 1-6 Infineon CYW54591 SDIO WiFi If customers require more information about these modules contact WiFi vendor for assistance Modify the coresponding SDIO for WiFi in the device trees DTS file Using sdmmc0 on cv22_walnut as an example If WiFi is not stable or is difficult to detect during the debugging stage users can decrease max-frequency to debug If users want to change the host voltage manually they can comment out the following line Then they can set GPIO156 to 1 for 1.8 V or to 0 for 3.3 V Driver and firmware menu For CV2x SDK 3 0 Amba build Some menus will be shown after the WiFi module brand is selected Select the corresponding driver version and firmware If the option required by the user is not available contact Ambarella or the WiFi vendor 1 0 2 is the host CPU general purpose input output GPIO which connects to WL_REG_ON on the WiFi device The host CPU GPIO is 4 which connects to WL_HOST_WAKE on the WiFi device and enables it when using the out of band OOB interrupt Ambarella strongly recommends that users use OOB It can be changed according to the hardware Select the option in menu to copy pre-built WiFi firmware and nvram data into the firmware For Cooper Amba build If it is infineon WiFi module use the following command For Cooper Yocto build It does not support infineon WiFi fmac driver for Yocto build Below is the WiFi tools menu For CV2x SDK 3 0 Amba build Ambarella recommends to unselect NetworkManager in Menuconfig The NetworkManager may affect the WiFi tune during the WiFi bring-up stage For Cooper Amba build For Cooper Yocto build Network throughout test application menu For CV2x SDK 3 0 Amba build For Cooper Amba build For Cooper Yocto build Build the SDK or Boot up the system Plug in the WiFi EVB card If users comment out line in DTS file they should set the SDIO host voltage first before plugging in the WiFi EVB card When plugging in the WiFi card the WiFi driver is automatically loaded DHD driver bcmdhd.ko for BroadCom cywdhd.ko for Infineon FMAC driver of Infineon cfg80211.ko compat.ko brcmfmac.ko brcmutil.ko Type the following command to enable the wlan0 interface Connect to AP when using station mode Set up the AP when using AP mode WiFi throughput test The Ambarella EVK is used as the iperf client and the PC is used as the iperf server 1 TCP transmit TX 2 TCP receive RX 3 UDP TX 4 UDP RX If the eth0 IP address and the wlan0 IP address are in the same network segment the user should disable the eth0 interface using the following command Otherwise if the Ambarella EVK cannot ping through the network the command is as follows</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_i2c</field>
    <field name="url">db/dc8/si_i2c.html</field>
    <field name="keywords"></field>
    <field name="text">I2C I2C This section describes how to support the Inter-Integrated Circuit I2C bus slave mode I2C interface errata Ambarella has observed a glitch with I2C IDC signals due to fast transition and long printed circuit board PCB traces especially for single-load use cases The glitch typically occurs when the signal transitions from low to high A glitch on the serial clock SCK can be problematic as it may appear as an incorrect clock As a workaround Ambarella suggests adding a RC filter on the SCL serial data SDA signal An option is to add a 1 0 0 ohm series resistor and a 1 0 0 pF capacitor single I2C device on the bus Depending on the load use a smaller capacitance value especially if there are multiple devices on the same bus This issue exists for both I2C master and slave configurations I2C Interface Connection Enable I2C slave mode steps Configure the device trees DTS node For example find kernel/linux-5.4 dtsi and modify the I2CS node Select the I2C slave controller before building the firmware Enable I2C slave mode in the Linux kernel along with the module that simulates the EEPROM For CV2x SDK 3 0 Amba build For Cooper Amba build For Cooper Yocto build Boot up the board</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_nand</field>
    <field name="url">dc/dac/si_nand.html</field>
    <field name="keywords"></field>
    <field name="text">NAND NAND The computer vision CV series system on chip SoC can be configured to enable NAND- or NOR-flash controller logic When the power-on-configuration uses NAND the system boots from the NAND devices The SoC can support 6 bit or 8 bit error correcting code ECC levels The ECC level depends on the power-on configuration POC 1 5 1 6 VD0_OUT15 I2S0_SO ECC level depends on POC 1 5 1 6 The SoC supports both 6 bit and 8 bit ECC in the kernel When using ECC 8 bit mode the NAND flash should have a 2 K 1 2 8 byte page size Note that it must before downloading the firmware to avoid an ECC error when changing the ECC level The software settings are as follows For CV2x SDK 3 0 Amba Build For Cooper Amba Build For Cooper Yocto Build The system supports 6 bit 8 bit software ECC users can select the option on the Linux kernel configuration In addition the 6 bit 8 bit software is controlled by the POC When using software ECC in the kernel users must make the following changes in the DTS file To enable the feature After the system boots up users can check BCH 8 bit mode with the command Figure 2-1 Hardware Reset Sequences The boot sequence from hardware reset is as follows The hardware fetches the first 4 KB the first page in the first block of NAND to the 4 KB buffer of flash I/O FIFO and executes the 4 KB codes The 4 KB bootstrap BST initializes the double data rate DDR controller and the dynamic random-access memory DRAM device The bootstrap relocates itself in DRAM and enables FIFO for the NAND transaction The bootstrap runs in DRAM and loads the bootloader BLD to DRAM After the BLD is loaded completely it jumps to the BLD codes The BLD initializes the memory management unit and page tables The BLD loads the Linux kernel image from the NAND primary partition PRI Optional The BLD loads the root file system image from the Linux partition The BLD jumps to the Linux kernel codes in the memory and completes the bootup process The address of the Linux kernel code is 0 x00208000 for most cases AMBoot does not support the decompress functionality all decompression is completed through the kernel In the default configuration the Linux kernel image is uncompressed and the file system is compressed The Linux kernel performs the decompression If both the Linux kernel and the file system are compressed copy the compressed images to the working DRAM space.h The kernel compresses both zImage The following figure illustrates the process the BLD loads additional program images from the NAND partition Figure 2-2 Load Linux Kernel and File System The following describes the sequence of the NAND boot flow The BLD reads out the partition table PTB from the PTB partition The BLD determines the following Linux kernel image size Linux kernel image load address Ramdisk file system image size optional Ramdisk file system load address optional The BLD loads the Linux kernel image to DRAM The BLD loads the Ramdisk file system to DRAM optional</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_audio</field>
    <field name="url">dc/dfd/si_audio.html</field>
    <field name="keywords"></field>
    <field name="text">Audio Audio CV series SoC supports the external codec The figure below shows the audio subsystem architecture for CV2 and CV22 Figure 1-1 Audio Codec Block Diagram for CV2 and CV22 The figure below shows the audio subsystem architecture for CV25 CV5 CV52 CV72 and CV3 Figure 1-2 Audio Codec Block Diagram for CV25 CV5x CV72 CV3 The CV series SoC audio function is implemented through the ALSA architecture Visit for information about ALSA Figure 1-3 ALSA Architecture The figure above describes the general software architecture for the audio The ALSA driver has been implemented by Ambarella while the ALSA core and ALSA library are provided by the ALSA open source project This enables flexibility for developers to implement applications following the pipeline Currently the Ambarella ALSA driver exclusively supports 1 6 bit PCM raw data However it can encode or decode operations in customized applications to support AAC or different audio encoding formats test_audio provides an example on how to use the ALSA driver are ALSA utility tools for controlling the sound card it belongs to GNU general public license version 2 GPLv2 arecord aplay Description arecord is a command-line soundfile recorder for the ALSA soundcard driver It supports several file formats aplay is similar to arecord but it plays instead of recording For the supported soundfile formats the sampling rate bit depth and other details can be automatically determined from the soundfile header arecord aplay Usage Prepare the hardware Read the hardware design schematics to verify that the audio jumpers have been configured correctly on the platform Compile ALSA-Lib and ALSA-Utils and then load the audio ALSA driver For details on how to compile ALSA refer to 2.1 Install ALSA Driver The audio ALSA driver will be loaded automatically by a script when the platform has been booted The script is named S13load-private-driver and it is located in ambarella/boards/cvx_board/rootfs/default/etc/init.d It can be modified per user requirements After the platform boots up type to check whether snd_soc_ak4951_amb exists If it does not exist use Set the codec controller Use the alsamixer to set the codec controller Type alsamixer and then to select the sound card Figure 1-4 Sound Card Selection Press Left or Right Key to select the Item and Up or Down Key to select the value Figure 1-5 Select the Value of Card Selection Press to save and exit Run arecord aplay This section introduces how to use and configure ALSA in Linux and explains ALSA basic concepts such as development methods for the audio application The ALSA provides audio functionality to the Linux operating system ALSA has the following significant features Modularized sound drivers SMP and thread-safe design User space library alsa-lib to simplify application programming and provide a higher level functionality Support for the older open sound system OSS API providing binary compatibility for most OSS programs ALSA comes with a kernel API and a library API Application programmers should use the library API rather than the kernel API The library offers 1 0 0 of the functionality of the kernel API but adds major improvements in usability improving the application code Install ALSA driver Install alsa-utils All alsa-utils require the ncurse library Configuring without the ncurse library will cause the system failure To cross-compile the ncurse library ncurse library can be found in Download alsa-utils-1.0.26.tar.bz2 from the site www.alsa Compile and install alsa-utils see below The alsa-utils is in The alsa-utils will be built as a dynamic library by default To build the alsa-utils as static binaries remove the dynamic library so* Install the ALSA Driver Test the Hardware and the ALSA Driver Boot the platform with the Linux kernel support Make the node for PCM capture and playback Copy conf files needed by alsa-utils to on the platform The conf files are created and installed after installing alsa-lib and placed in the directory indicated by with-configdir option alsa-utils just need 3 conf files which are alsa.conf cards/aliases.conf and pcm/default.conf aplay and arecord are provided in alsa-utils Arecord is a link to aplay and used to capture sound For capture For playback A-law needs to specify the format This section introduces basic concepts and guidelines for developing the audio application using ALSA and does not provide a complete reference manual for the alsa-lib API Most of the contents mentioned in this section can also be found in www.alsa Reference Documents ALSA-lib API document A tutorial on using the ALSA Audio API ALSA 0.9.0 HOW TO Reference Code play.c latency.c pcm.c pcm_min.c Basic Concepts Capture Receiving data from the outside world which is different from arecord as it implies data storage It is not part of the ALSA APIs Playback Delivering data to the outside world presumably though unnecessarily it can be heard Duplex Duplex shows a situation when the capture and playback can occur simultaneously on the same interface PCM Pulse code modulation PCM describes a method that represents an analog signal in a digital form It is used by all computer audio interfaces and in the ALSA API as a shorthand for Channel 1 for mono 2 for stereo Sample A single value refers to the amplitude of the audio signal at a single point in time on a single channel Frame When working with the digital audio users often discuss the data that represents all channels at a single point in time This is a collection of samples one per channel and is generally called a frame In other words a frame sample channel Sample format This indicates the sample format used to transfer data to or from the interface It may or may not correspond with a format directly supported by the hardware Rate For fully digital interfaces the rate indicates the speed of the clock that is used to move digital audio data to or from the outside world Interleaved A data layout arrangement samples of each channel is played at the same time so that they can follow each other sequentially See the following section non-interleaved Non-interleaved A data layout where the samples for a single channel follow each other sequentially samples for another channel are either in another buffer or another part of this buffer In contrast with the interleaved concept it responds with a format supported by the hardware Chunk size The number of frames used when transferring data to from the device hardware buffer Chunk byte Chunk byte chunk size channel Period The number of frames processed every time Buffer size The size of buffer used to store the sound data per period ALSA Architecture Application developers should focus more on the application logic and less on the implementation of the ALSA core and ALSA driver Furthermore developers must use the API functions in the ALSA-lib to achieve native ALSA support for applications The ALSA-lib documentation tutorial is a valuable developer reference to the available functions A typical audio application uses the following routine Open the device The currently designed interfaces are listed below Information interface Control interface PCM capture interface PCM playback interface ALSA does not directly operate with the interfaces listed above the most important ALSA interfaces to the PCM devices are the default plughw 0 0 and HW 0 0 interface Only HW 0 0 will interact with the and because HW 0 0 is the lowest layer interface However plughw 0 0 and default only interacts with HW 0 0 If the plughw or default interface is used the sound hardware is not important If the sound device does not support the sample rate you specify your data will be automatically converted This also applies to the sample format the access type and the number of channels For the hardware interface users must check if their hardware supports the desired configuration If the desired configuration is not supported then the application using the hardware will fail but the applications using plughw or default will still be successful because of its convertible capability The default interface fits the requirement of most applications In addition ALSA provides many PCM plugins e.g plugin copy plugin rate plugin file and etc Please see alsa-lib API document for details Users can use the function named snd_pcm_open() to open the PCM device Because using one PCM handle for both playback and capture is not possible users must configure two handles for full-duplex the sound device can be opened in the capture mode and the playback mode simultaneously they are independent Set Parameters Users must correctly set the parameters before writing reading PCM data to from the sound device Parameters are as follows Access type Sample format Sample rate Number of channels Number of periods Period size Allocate the hardware parameter structure Initialize the hardware parameter structure with the full configuration space of the soundcard Restrict the configuration space to a certain configuration with a set of functions named as follows If the hardware interface is used calls to these functions may fail if the sound device does not support the parameters you specify Apply the configuration to the PCM device pointed to by capture or playback This will also prepare the PCM device Read Write Sound Data For the interleaved access type For the non-interleaved access type Xrun underrun overrun After the audio interface begins it continues running until it is instructed to stop It will continue to generate data for the computer to use and or send data from the computer to the outside world The reasons listed below explain why the userâ€™s program might not keep up with it For playback this can lead to a situation where the interface requires new data from the computer however because no new data exists the interface uses old data left in the hardware buffer This is called an For capture the interface may have data to deliver to the computer but nowhere to store it so it has to overwrite part of the hardware buffer that contains data the computer has not received This is called an For simplicity ALSA uses the term to refer to either of these conditions underrun or overrun If xrun occurs the following function should be called snd_pcm_prepare(capture) snd_pcm_prepare(playback) This section includes aac_audio_enc.h Do not change the parameter order Structure name au_aacenc_config_s Parameter Description u32 sample_freq Specifies the sampling rate u32 coreSampleRate Specifies the sampling rate for AAC+ s32 Src_numCh Specifies the input channel number s32 Out_numCh Specifies the output channel number u32 bitRate Specifies the bitrate of encoding bitstream u8 ena_adjbr Specifies the adjusting bitrate mode u32 adj_bitRate Specifies the adjusting bitrate when encoding u32 quantizerQuality Specifies the quantizer quality u32 tns Specifies the TNS function on/off s8 ffType Specifies the file format ADTS ADIF LOAS RAW s32 enc_mode Specifies the encode mode AAC AAC+ AAC++ u32 frameCounter Specifies the encode frame counter u32 ErrorStatus Specifies the error status of encode u32 nBitsInRawDataBlock Specifies the all bit number of encoding a frame u8* enc_wptr Specifies the write pointer of output bit stream s32* enc_rptr Specifies the read pointer of input source data u32* codec_lib_mem_adr Specifies the address of library working memory audio_lib_info_t lib_info Specifies the SVN revision of audio library u32 calibre_proc_on Specifies the calibration process on/off u32 calibre_proc_mode Specifies the calibration process mode u32 calibre_apply Specifies the calibration apply on/off s8* calibre_curve_addr Specifies the address of calibration curve Parameter values sample_freq Supported options Limitation Example If the input audio signal source is 4 8 KHz the parameter is set as follows Parameter values coreSampleRate Supported options Obsolete this parameter is automatically set by sample_freq and enc_mode Parameter values Src_numCh Supported options Example If the input audio source is stereo the parameter is set as follows Parameter values Out_numCh Supported options Obsolete this parameter is auto-set by Src_numCh and enc_mode Parameter values BitRate Supported options Parameter values ena_adjbr Support options Obsolete Parameter values adj_bitRate Supported options The same as bitRate This parameter is changeable after calling aacenc_setup function Example Set the initial bit rate bitRate Change the AAC bitrate adj_bitRate Set adj_bitRate bitRate in aacenc_setup function to avoid NULL value Parameter values QuantizerQuality Supported options The parameter is related the quantizer quality 0 low 1 high 2 highest Example The highest value brings in the best encoding quality but the computation is the most complex Recommend quantizerQuanlity 1 Parameter values Tns Supported options The parameter switches TNS on or off 0 Off 1 On Example Parameter values FfType Supported options Example To obtain the raw AAC bit stream without any MPEG defined header information For normal recording generate the AAC bitstream with the ADTS header Parameter values enc_mode Supported options Limitation Currently only AACPLAIN AACPLUS and AACPLUS_PS are supported Example Encode the input audio source to the plain AAC Parameter values FrameCounter Obsolete Parameter values ErrorStatus Supported options The upper layer must check the ErrorStatus when it calls the AAC encode APIs Parameter values NBitsInRawDataBlock Supported options This parameter records all the bit numbers that go into encoding a frame Parameter values enc_wptr Supported options This parameter is the write pointer of the encoding bitstream A memory address must be assigned to this parameter Parameter values enc_rptr Supported options This parameter is the read pointer of the input source data The address of the input source address must be assigned to this parameter The source PCM format is 1 6 bits resolution If the input audio source is stereo the PCM data is interleaved Parameter values codec_lib_mem_adr Supported options This parameter is the address of the libraryâ€™s working memory A memory address must be assigned to this parameter The memory is at least 1 0 6 K bytes Parameter values lib_info For parameters refer to 1.1 Audio Codec Block Diagram aacenc_setup Description Initialize the AAC library Assign the AAC data control structures to the internal operation variables Confirm that the configurations are correct Syntax aacenc_open Description Allocate the memory required for the AAC encode library This function must be called before starting the AAC encoding Syntax aacenc_encode Description Performs AAC encoding One frame audio bit stream will be generated This function must be called after the aac_setup and aac_open Syntax Sample app test_aacenc.c The following is an AAC encode operation example This section describes the data structure and APIs of the AAC decode library Structure nameï¼š au_aacdec_config_s Parameter Description u32 sample_freq Specifies the sample frequency s8 syncState Specifies the sync status s8 channelMode Specifies the channel mode s32 bsFormat Specifies the bitstream format adif adts loas s32 streamType Specifies the stream type s32 objtype Specifies the audio object type s32 profile Specifies the bitstream profile s32 useHqSbr Specifies the high quality SBR s32 dec_mode Specifies the decode mode AAC AAC+ AAC++ s32 frameSize Specifies the frame size s32 Src_numCh Specifies the input channel number s32 Out_numCh Specifies the output channel number s32 averageBitrate Specifies the average bit rate s32 numberOfRawDataBlocks Specifies the number of raw data blocks in frames s32 bBitstreamDownMix Specifies the stereo to mono down mix flag s32 externalBitrate Specifies the external bitrate for loading the input buffer s32 externalSamplingRate Specifies the external sampling rate for raw decoding s32 ErrorStatus Specifies the error status of decode process s32 fs_out Specifies the sample frequency of bitstream s32 fs_out Specifies the sample frequency of bitstream s32 fs_core Specifies the core sample frequency for AAC+ bitstream s32 frameCounter Specifies the frame counter of decode s32 errorcounter Specifies the error counter of decode s32 errorcounter Specifies the error counter of decode s8 bDownSample Specifies the down sampled SBR flag u32 consumed_byte Specifies the consumed byte of decoding one frame u32 interbufsize Specifies the internal buffer size u32 interbufsize Specifies the internal buffer size s32* dec_wptr Specifies the write pointer of output data u8* dec_rptr Specifies the read pointer of input bitstream u8 has_dec_out Specifies the decode output flag u32* codec_lib_mem_adr Specifies the address of library working memory u8* codec_lib_backup_adr Specifies the address of library backup memory u16 codec_lib_backup_size Specifies the size of library backup memory u8 need_more Specifies the need for more flags audio_lib_info_t lib_info Specifies the svn revision information of audio library Parameter value sample_freq Obsolete Parameter value syncState Supported options Parameter value channelMode Supported options Parameter value bsFormat Supported options Example To decode a AAC bitstream with ADTS header Parameter value streamType Supported options Parameter value objtype Supported options Reports the audio object type for LOAS bitstream Parameter value profile Supported options Reports the AAC profile of decoding bitstream Parameter value useHqSbr Supported options Set by the AAC decode library This parameter is set to with decoding one channel AAC+ bitstream and with decoding two channel AAC+ bitstream in the library 1 high quality sbr on 0 low power on Parameter value dec_mode Supported options Parameter value frameSize Supported options Parameter value Src_numCh Supported options Parameter value Out_numCh Supported options Obsolete Parameter value averageBitrate Supported options Set by users with the input buffer size Parameter value numberOfRawDataBlocks Supported options Reports the number of RAW data blocks in frames Parameter value BitstreamDownMix Supported options Sets by the AAC decoder library with Parameter value externalBitrate Obsolete Parameter value externalSamplingRate Supported options Limitation This parameter must be set if the decoding bitstream is RAW Parameter value ErrorStatus Supported options Parameter value fs_out Supported options This is the same as the externalSamplingRate supported option Parameter value fs_core Supported options Parameter value frameCounter Supported options Reports the frame counter Parameter value errorcounter Supported options Reports the error counter Parameter value DownSample Supported options Set by the AAC decode library with Parameter value consumed_byte Supported options Reports the consumed byte when calling decoding APIs Parameter value interbufsize Supported options Set by users with the internal buffer size Parameter value dec_wptr Supported options This parameter is the write pointer of decoding bitstream A memory address must be assigned to this parameter The decoding output PCM format is 3 2 bits resolution Parameter value dec_rptr Supported options This parameter is the read pointer of decoding bitstream A memory address must be assigned to this parameter Parameter value has_dec_out Supported options The AAC decode library will set has_dec_out 1 when AAC decoding is successful Parameter value codec_lib_mem_adr Supported options This parameter is the address of the libraryâ€™s working memory A memory address must be assigned to this parameter The memory is at least 1 0 6 K bytes Parameter value codec_lib_backup_adr Supported options This parameter is the address of the libraryâ€™s backup memory A memory address must be assigned to this parameter The memory is at least 2 5 2 K bytes Parameter value codec_lib_backup_size Supported options This is necessary if two bitstreams are being decoded simultaneously The backup size is at least 2 5 2 K bytes Parameter value need_more Supported options The AAC decode library will report the need for more flags if the decoding buffer is not enough Parameter value lib_info Obsolete aacdec_setup Description Initialize the AAC library Assign the AAC decode data structures to the internal operation variables Confirm that the configurations are correct This function must be called as the first one Syntax Parameters Please refer to Section 4.1 Data Structure 4.1 Data Structure aacdec_open Description Allocate the memory required for the AAC decode library This function must be called before starting the AAC decoding Syntax Parameters Please refer to Section 4.1 Data Structure 4.1 Data Structure aacdec_set_bitstream_rp Description Initialize the internal bit stream buffer This function must be called after aacdec_setup and aacdec_open Syntax Parameters Please refer to Section 4.1 Data Structure 4.1 Data Structure aacenc_decode Description Perform AAC encoding and one frame audio sample will be generated This function must be called after the aacdec_setup aacdec_open and aacdec_set_bitstream_rp functions Syntax Parameters Please refer to Section 4.1 Data Structure 4.1 Data Structure Sample app test_aacdec.c The following is an example of the AAC decode operation This section describes how to enable nau8810(analog MIC) and DMIC(digital MIC) on CV5x EVK board On CV5x EVK board the nau8810 and DMIC cannot be enabled at the same time By default nau8810 is enabled If users want to enable DMIC they can refer to the following steps CV52_Zr board and CV5_Timn board are similar in this section Activate the option under menuconfig_public_linux Users need to enable in to compile it Make some modifications on SDK 1.0 CV52_Zr board Modify ambarella/boards/cv52_zr/bsp/cv52_zr.dts CV5_Timn board Modify ambarella/boards/cv5_timn/bsp/cv5_timn.dts Both modifications are the same and CV52_Zr board is taken as an example below HSYNC_DMIC_SEL pull high Set switch 1 to ON at DIP SW1 Figure 5-1 Diagram of DIP_SW1</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_debugfs</field>
    <field name="url">dd/df0/si_debugfs.html</field>
    <field name="keywords"></field>
    <field name="text">Debugfs Debugfs Debugfs is an easy-to-use RAM-based file system specially designed for debugging purposes The CONFIG_DEBUG_FS option is set to by default It is mounted at on the EVK board If it is not mounted Debugfs could mount with a command given below General purpose input/output GPIO status can be obtained by a command from the Debugfs as follows If the GPIO is not occupied by the other driver it can be read and written to amba_debug/ambad.ko Set the GPIO as input use GPIO 5 for example Set the GPIO as output high use GPIO 5 Set the GPIO as output low use GPIO 5</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_emmc</field>
    <field name="url">de/d93/si_emmc.html</field>
    <field name="keywords"></field>
    <field name="text">EMMC EMMC The Cooper system on chip SoC can be configured to enable the eMMC controller When the power-on configuration uses eMMC the system boots from the eMMC devices Because the EVK board default configuration uses NAND flash as a storage boot media a hardware rework is required to support the eMMC devices and an SDIO interface is used If the eMMC is the boot up device a proper POC setup is also required Refer to Ambarella DG Flexible Linux SDK NAND NOR Flash EMMC Selection Qualification for verified eMMC information POC 5 4 BOOT MODE are used to set the booting media POC 4 5 0 b01 means to boot up from eMMC POC 2 1 2 0 1 4 BOOT OPTION 8 1 are used to configure detailed options Set them according to the hardware design and eMMC specifications Bus width must be chosen between 4 bits and 8 bits POC POC Function POC Value 1 POC Value 0 Recommended Settings BOOT OPTION 8 MMC controller choose use legacy MMC controller use Synposys MMC controller 1 BOOT OPTION 6 tRSCA sel boot delay tRSCA 1 0 0 0 0 SD clock cycles tRSCA 7 5 SD clock cycles 0 by default Depends on the eMMC BOOT OPTION 5 tRSCA enable boot delay Enable the tRSCA delay during the boot initialization Disable the tRSCA delay during the boot initialization 1 BOOT OPTION 4 eMMC enable reset Controller will drive sd_reset pin Controller will not drive sd_reset pin 1 BOOT OPTION 3 eMMC boot sd pull Internal pull-high on sd_cmd and sd_d 7 0 No pull on sd_cmd and sd_d 7 0 1 BOOT OPTION 2 4 bit bus width Use 4 bit data pins for booting x Depends on the design BOOT OPTION 1 8 bit bus width Use 8 bit data pins for booting x Depends on the design Figure 1-1 Example of tRSCA Timing Specification CV5 Timn EVK SW7 7 â€“ ON SW7 6 OFF SW6 1 ON For Option B the Max Clock of SD0 needs to be lowered to 5 0 MHz current is 1 0 0 MHz The following shows pins bits and clock reates for eMMC boot options Pins Bits and Clock Rates for eMMC Boot Options Option A For eMMC Boot Pins Bits POC17/ POC21 eMMC Boot Max Clock(MHz) SD0 8 1 1 o 2 0 0 SDIO0 4 1 1 x 2 0 0 SDIO1 4 1 1 x 5 0 Option B For eMMC Boot Pins Bits POC17/ POC21 eMMC Boot Max Clock(MHz) SD0 8 1 1 o 5 0 SDIO0 4 1 1 x 2 0 0 SDIO1 4 1 1 x 2 0 0 Option A is eMMC boot and SD0 8 bit with maximum clock rate 2 0 0 MHz but SDIO1 maximum clock reta supports 5 0 MHz only Option B is eMMC boot and SD0 8 bit maximum clock rate 5 0 MHz and the SDIO1 maximum clock reta can be up to 2 0 0 MHz Contact the Ambarella support team for further questions The default eMMC configuration is as follows in SDK/ambarella/board/cv5x_board Ambarella highly recommends that the eMMC boot functions with Ext4 file system which is the default configuration For more information about the Ext4 file system refer to Ext4 When using eMMC boot don t enable fdisk Because it is not supported by eMMC boot If users download a firmware into the board with fdisk enabled accidentally they need to erase the whole eMMC before downloading a new firmware Else the board can t boot up normally After building the binary select the board configuration with and then download the binary to EVK boards Forcing USB boot is required to successfully flash the binary if the boot media is switched from NAND to eMMC or vice versa When downloading a firmware whose size is larger than 1 GB users must increase the timeout period in case of hitting timeout issue They should modify in AmbaUSB.conf file which locates in of AmbaUSB installation folder means that the timeout is 5 s They can enlarge it to 1 0 s or even larger depending on the firmware size The maximum firmware size that can be downloaded by AmbaUSB must be less than CV5x set s DRAM size SD slot 2 cannot enable ultra high speed when EMMC boot is enabled</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">si_usb</field>
    <field name="url">df/d51/si_usb.html</field>
    <field name="keywords"></field>
    <field name="text">USB USB The CV5x USB 3.2 Gen-2 port supports both device and host modes The USB 2.0 port only supports device mode Device mode can be used to perform flash direct downloading mass storage virtual Ethernet device and serial downloading Host mode can be used to connect with USB storage USB WiFi and the USB mouse keyboard Set the USB to function on mode Confirm that the USB is functioning on mode The CV5x platform can use the free partition for a mass storage USB mass storage USB storage requirements The CV5x platform The USB storage driver g_mass_storage.ko Unused partition or space USB mass storage testing the USB storage Confirm that the USB is functioning on mode and the module ambarella_udc is loaded into the system The first time the USB is used as a mass storage device confirm that the unused partition of the board will be used for storage If it is not formatted to the correct file system skip to Section to set up unsorted block image file system UBIFS on the partition and mount it to If UBIFS is not directly supported by the PC Vfat is required Users can create a Vfat file system with the commands below In the following commands the storage size is 3 6 MB storage size should be at least 3 2 MB Load the USB storage module Use the storage partition from the Windows PC or the CV5x platform one user at a time To use the storage from the PC unmount it on the CV5x platform To use storage on the CV5x platform go to the PC and eject the device To use the storage partition on the CV2x platform use the following code To use the storage partition from Windows connect the CV5x board to the PC via USB The Windows PC will recognize the CV5x board as a mass storage device The CV5x platform USB can serve as a virtual Ethernet device USB Ethernet device USB Ethernet device requirements The following components are required to test the USB Ethernet device with the Windows operating system OS host Windows OS PC The USB driver linux.inf ambarella/kernel/linux/Documentation/usb/linux.inf The USB application PortServer ps.exe CV5x platform Linux USB Ethernet RNDIS gadget driver g_ether.ko The USB application test_bsreader test_stream USB Ethernet device test USB Ethernet device Transfer the video streams via USB as an Ethernet device using the following steps Verify that the USB cable is connected between the windows PC and the CV5x board Confirm that the USB is functioning in mode and that the module ambarella_udc is loaded into the system Log in to the CV5x board and load the module g_ether The PC will discover the device Linux USB Ethernet RNDIS Gadget Install the driver ambarella/kernel/linux/Documentation/usb/linux.inf for the device After installation the PC will add a device to network adapters Refer to the figure below Figure 1-1 USB is Recognized as a Network Adapter in the PC Set up the IP address for example 10.0.1.1 for the Linux USB ethernet RNDIS Gadget on the PC Refer to the figure below Figure 1-2 IP Address of Linux USB Ethernet RNDIS Gadget on the PC Configure the USB0 IP address for example 10.0.1.10 on the CV5x board Use USB as an Ethernet device For example run mediaserver via USB0 Ethernet The example above is for the CV5x EVK board because the Avahi daemon will enable eth0 automatically if it finds eth0 down Receive the streams VLC with the USB0 IP for example 10.0.1.10 The CV5x USB port can be used as a serial gadget to be a virtual serial port for the PC USB serial requirements The following components are required to test USB serial with a Window OS host Windows OS PC The USB driver linux-cdc-acm.inf ambarella/kernel/linux/Documentation/usb/linux-cdc-acm.inf CV5x platform Linux USB Ethernet RNDIS gadget driver g_serial.ko Test the USB serial Confirm that the USB is functioning in mode and module ambarella_udc is loaded into the system If the firmware is built with the configuration shown above the USB gadget serial driver will be loaded automatically when the board boots Skip this step and proceed to the next step If the USB gadget serial driver is not loaded automatically it must be installed manually Users should ensure that they have in 10.61 After the gadget driver has been established users should then see a node Set up an entry to run The line should be as follows Install the Windows host abstract control model ACM driver To use the Windows ACM driver users must have the linux-cdc-acm.inf file ambarella/kernel/linux/Documentation/usb/ which supports all recent versions of Windows When the gadget serial driver is loaded and the USB device is connected to the Windows host with a USB cable Windows will recognize the gadget serial device and ask for a driver The driver can be found in the folder that contains the linux-cdc-acm.inf file Windows XP When the gadget serial device is first plugged in the Found New Hardware Wizard starts up Select Install from a list or specific location Advanced Then on the next screen select Include this location in the search and enter the path or browse to the folder containing the linux-cdc-acm.inf file Windows will display a warning that the gadget serial driver has not passed the Windows Logo testing but users should select Continue anyway to finish the driver installation Windows 7 When the gadget serial device is first plugged in go to Control Panel System Hardware Device Manager and expand Other Devices Right click on Gadget Serial entry and select Update Driver Software Click Browse my computer for driver software and enter the path or browse to the folder containing the linux-cdc-acm.inf file Select Install the driver anyway and finish the installation In Control Panel System Hardware Device Manager expand the Ports COM and LPT entry Users should see listed as the driver for one of the COM ports shown in the figure below To uninstall the Windows XP driver for right click on the Gadget Serial entry in the Device Manager and select Uninstall Figure 1-3 Gadget Serial Port Test with PuTTy The PuTTy console and PC settings must match the specifications below Verify that AmbaUSB is not in use while using USB as the serial port If there is no print on the USB serial console unplug the USB cable and plug in again Before rebooting the board disconnect the USB serial console Users can test the function as follows First in the debug console always COMM1 type the information below Figure 1-4 Gadget Serial Port Output Information Question 1 Is it possible for users to burn the code to flash when it is completely empty Answer Yes it is possible to use the USB to perform those operations Question 2 The CV5x board is not responding and the AMBoot shell cannot be accessed How can the binary be burned to the board Answer Set the dual in-line package DIP switches to USB boot mode and upgrade the firmware directly Question 3 The system fails when the user tries to download the firmware using the USB Why does the USB performance appear to be unstable Answer Ensure that the USB cable is good quality Data transfer may be unreliable if the poor-quality USB cables are used The cable in the photo below is an example of a suitable USB 2.0 cable Figure 1-5 USB 2 0 Cable Question 4 Does the Cooper Software Development Kit SDK provide a USB driver on the platform Is the USB device compatible with insert device name here Answer Yes The USB driver for Linux can be found in the SDK Linux patch The USB driver implementation is open to customers and used The data transfer speed and reliability are good However the USB driver is not designed as and the protocol is simple Developers can choose to use the driver for applications if it is required Question 5 What does Ambarella recommend for burning firmware to flash in production Answer Use a USB Ambarella suggests reserving four pins on the printed circuit board PCB for USB connections Upgrading firmware using the USB has the following advantages USB can burn codes to an empty NAND flash in production USB can download firmware to the board if the wrong codes have been burnt or if the system is unable to boot up Question 6 While using the USB as an Ethernet device the connection between the PC and the board is running normally The ping is being received from each side However the rtsp_server shows the message which does not match the IP of USB0 Why are the streams not being viewed using this address Answer This is because the rtsp_server requires the default route to stream the video Check the default route The usage of the CV5x USB host mode is shown below Set the USB to function in mode Confirm that the USB is functioning in mode Support USB storage device requirement CV5x platform Support USB storage device test steps Confirm that the USB is working in the mode Plug in the USB storage device The kernel will add and modules automatically Afterwards it will detect the USB storage Find the device name of the USB storage device Mount the USB storage device Support for USB mouse keyboard device requirements CV5x platform Support USB mouse keyboard device sample Confirm that the USB is functioning in mode possible parameter host device Plug in the USB mouse device The kernel will recognize the device as follows Confirm the event interface of the USB mouse Get the mouse event Or Plug in the USB keyboard device The kernel will recognize the device and send the message as shown below Support USB serial device requirements CV5x platform The system and binary build Support USB serial device test steps Confirm that the USB is functioning in mode possible parameter host device Plug in the USB serial device The kernel will add modules automatically and detect the USB serial device Check the USB serial device Why do users require the eye diagram test The USB eye diagram is the result of accumulating and displaying bits of the serial signal collected by the afterglow method The shape of the superimposed image resembles an eye so it is called the eye diagram test According to the information of the eye diagram the inter-symbol crosstalk and noise can be observed reflecting the overall characteristics of the digital signal so as to estimate the advantages and disadvantages of the system Therefore the eye diagram test is the core of signal integrity analysis of high-speed interconnection systems How do users test the eye diagram in the Ambarella evaluation kit EVK List of testing equipment Select any two EVK test boards with USB devices one for USB host and one for USB device USB OTG cable Micro USB cable E2666B USB 2.0 hi-speed device test fixture kit Agilent Keysight test fixture Compatible oscilloscopes Configure the USB device EVK firmware Then burn them to the host EVK to be tested Set up the environemnt Figure 2-1 Ambarella USB Eye Diagram Environment Setting Follow the steps below for the test procedure Host as the USB host connect the micro-USB port to the test jig Device as USB device connect the micro-USB port plug to the same test fixture as a USB device-like dongle Ensure that the EVK_host as USB host starts to output the USB test pattern Check point The host has identified the device Figure 2-2 Ambarella USB Eye Diagram Test Result Switch the jig to test mode on the kit board After the negotiation between the host device is complete and the test mode is sent the user can unplug the EVK_host as a USB device The system must be rebooted and commands must be repeated if the user wants to start a new test product identifier PID This test is only for the direct USB port on the Ambarella chip not the USB HUB ports For HUB ports test ask the USB HUB vendor for help Do not connect other USB devices during the eye diagram test to avoid interference Conclusion Figure 2-3 Ambarella USB Eye Diagram Support USB UVC camera device requirements For the CV5 platform Support USB UVC device test steps Ensure that USB 3.0 is functioning in mode possible parameter host device Use modprobe uvcvideo Plug in the USB UVC device The kernel identifies the USB UVC camera and registers the V4L2 video device automatically Check the USB UVC device Capture a YUV picture based on V4L2 The v4l-utils are a series of packages for managing media devices that aid in obtaining YUV frames from a UVC camera First use the v4l2-ctl command to set camera parameters such as frame size and frame rate For example the command below will set up a camera with a resolution of 1 9 2 0 x1080 and a frame rate of 3 0 frames per second fps Then use the v4l2-ctl command to enable streaming and output a frame to a file For example the following command will capture a YUV image and save it to a file named yuv_image.yuv The table below is the test result of USB 3.2 speed of mass storage USB Mode Read Write Speed USB Host Read 696.4 MB/s Write 544.1 MB/s USB Device Read 5 6 0 MB/s Write 5 6 0 MB/s The USB port on PC greatly affects the read and write speed of the USB device For example with the same device the read write speed of the USB 3.0 port maybe 1 5 0 MB/s 2 0 0 MB/s slower than that of the USB 3.1 port on host PC Figure 3-1 Ambarella USB Speed with USB 3 1 Port Figure 3-2 Ambarella USB Speed with USB 3 0 Port The reference test steps are as follows Assemble the jumper on J28 Input the following test commands The Ambarella UVC camera is a camera with a USB interface that meets the standards set for the USB video class UVC Parameters Specification UVC features UVC 1.0 UVC 1.1 UVC 1.5 Bulk and isochronous ISOC mode Ambarella suggests using bulk mode for higher throughput Multiple endpoints EPs with multiple streams Up to 2 UVCs for USB 2.0 Up to 7 UVCs for USB 3.2 Gen2 Streams with different resolution in the same format Camera terminal CT control Processing unit PU control USB 3.2 Gen2 transmission Bit rate up to 2 Gbps UVC stream Up to H.265 8 K 3 0 fps Default 1 0 8 0 p 3 0 fps Up to H.264 8 K 3 0 fps Default 1 0 8 0 p 3 0 fps Up to MJPEG 8 K 3 0 fps Default 1 0 8 0 p 3 0 fps Up to NV12 4 K 3 0 fps Default 7 2 0 p 3 0 fps Up to YUYV 1 0 8 0 p 3 0 fps Default 4 8 0 p 3 0 fps JPEG NV12 and YUYV image UAC features UAC 1.0 microphone UAC 2.0 microphone 4 8 Kbps sample rate and stereo microphone input Volume and mute control Compatibility Microsoft Windows 7 and above Linux Ubuntu 16.04 and above USB3 has 1 5 physical EPs in total 1 x EP0 7 x IN EPs and 7 x OUT EPs Only 7 x IN EPs can be used for UVC USB audio class UAC purposes Each UVC uses either 1 or 2 IN EPs Each UAC uses 1 IN EP If only UVC up to 7 x UVCs can be supported in parallel if using single IN EP If UVC UAC up to 6 x UVC 1 x UAC can be supported in parallel if using single IN EP for UVC For UAC if enabling audio volume control one additional IN EP will be occupied Therefore 5 x UVC 1 x UAC UAC volume control can be supported with a total of IN EPs 7 if using a single IN EP for UVC The maximum UVC throughput is about 4.278 Gbps NV12 4 K 4 3 fps 3 8 4 0 2 1 6 0 1 2 4 3 1 0 0 0 0 0 0 0 0 0 without loading For Old SDK Amba Build For Cooper SDK Amba Build For Cooper SDK Yocto Build For Linux kernel 5 1 5 If users do not want to change using they can also add in and then restart the board The following is the recommended topology between canvases and encode streams in the image audio video IAV layer which is required to match the UVC stream application Users can refer to the Lua script v6_generic_1080px2.lua and the UVC stream configuration file uvc.conf Figure 4-1 Ambarella UVC Pipeline UVC stream application is a unit test which is responsible for fetching the video frame from the IAV layer and then feeding it to Linux V4L2 The source is located under ambarella/unit_test/private/uvc_stream Before streaming the UVC set up IAV canvas and encoding 1 0 8 0 p Before streaming the UVC set up IAV canvas and encoding High-efficiency video coding HEVC 8 K Ambarella recommends using a sensor with direct 8 K resolution Configure the conf according to the actual stream Start streaming UVC 1.0 and UAC 1.0 Or start streaming UVC 1.1 and UAC 1.0 Or start streaming UVC 1.5 and UAC 1.0 Or start streaming UVC 1.0 and UAC 2.0 Or start streaming the multiple-UVCs and UAC 1.0 by USB 2.0 Note USB 2.0 UDC only has six physical endpoints 1 EP0 5 IN EPs USB 3.2 Gen2 UDC only has 1 5 physical endpoints 1 EP0 7 IN EPs 7 OUT EPs Each UVC will use two IN EPs and each UAC will use 2 IN EPs with volume control enabled If users enable the volume control while using two UVCs in USB 2.0 or three UVCs in USB 3.2 Gen2 the number of used IN EPs will exceed the number of physical IN EPs and the device will have no audio Users must disable volume control in these situations Or start streaming UVC 1.0 and UAC 1.0 by USB 3.2 Gen2 ISOC mode Or start streaming UVC 1.0 and UAC 1.0 by USB 3.2 Gen2 bulk mode Bulk mode can achieve higher transmission speed than ISOC mode Or start streaming the multiple-UVCs and UAC 1.0 by USB 3.2 Gen2 bulk mode Stop streaming UVC and UAC Users can use the command start-uvac-configfs h for help with the options Connect the PC with the USB cable Figure 4-2 Connect the PC Check the Device Manager Figure 4-3 Device Manager Use Potplayer to stream the Ambarella UVC Menu- Preferences F5 Device- Webcam Figure 4-4 Potplayer Select the video and audio device and then open the devices to view the preview Menu- Open- Open Webcam Other Device Figure 4-5 Preview For more details refer to ambarella/unit_test/private/uvc_stream/doc/Ambarella_UVAC_GETTING_STARTED.md codec Type Streaming Encode Latency from DSP ms Encode Latency from Potplayer ms MJPEG 1 0 8 0 p60 11.35 1 0 0 4 kp60 23.82 2 4 0 8 kp30 77.61 5 9 0 AVC Temporal Mode 1 0 8 0 p60 12.64 7 5 1 6 0 4 kp60 26.44 8 2 2 0 0 8 kp30 102.02 1 1 3 9 0 HEVC Temporal Mode 1 0 8 0 p60 12.91 5 3 1 2 0 4 kp60 26.10 2 6 1 3 0 8 kp30 98.83 9 6 3 8 0 HEVC Spatial Mode 1 0 8 0 p60 12.64 9 0 4 kp60 24.35 1 0 0 8 kp30 87.26 3 6 0 NV12 8 0 0 x600 3 0 2 6 0 7 2 0 p30 4 3 0 This latency is measured between sensor frame exposure and UVC streaming out it contains three parts the pipeline latency the transfer latency and the decoding latency The first two lantencies are related to the performance of Ambarella system on chip SoC and the decoding latency is highly dependent on the decoding performance of the connected PC laptop The way to measure pipeline latency from sensor capture done to image digital signal processing IDSP encode done can be found on Page ADVANCED Pipeline Latency The way to measure transfer latency from encode done to UVC frame capture done by PC host is as follows Modify the source code Build the firmware Enable UVC function 4.2 Build Firmware Support UVC Enable PTP function 2 PTP Examples on the Ambarella Platform Enable UVC_HOST application Test the latency Copy the test-uvc-host-native to the Ubuntu PC this tool is not related to the SDK version Load firmware to the board Start PTP Start UVC on board Start capturing UVC frame on Ubuntu PC The uvc-gadget UVC test program officially recommended by Linux only supports MJPEG and YUV streams with ISOC mode Ambarella adds BULK mode support for uvc_gadget with the following patch If using BULK mode set max_payload_size with p option The configuration steps are as follows The test steps are as follows The configuration steps are as follows Enable the device driver Enable the device package For Cooper SDK Amba Build For Cooper SDK Yocto Build Enable the host package Build PC Host Tool With Amba Build Enable Board Host Tool With Amba Build Enable Board Host Tool With Yocto Build Test FunctionFS single device Device Host Test FunctionFS composite device Device Host Users can run h to get help Due to CV5x UDC hardware limitation the max chunk size can only be up to 6 4 KB</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">index</field>
    <field name="url">index.html</field>
    <field name="keywords"></field>
    <field name="text">Outline The following revision history table summarizes changes contained in this document Updated Date Modification 2 0 2 1 1 0 1 4 Initial Version 2 0 2 1 1 2 2 3 Updated Section 4 Ambarella UVC Camera 2 0 2 2 0 2 2 2 Updated Section 4 Ambarella UVC Camera 2 0 2 2 0 4 0 6 Added Section Boot and Upgrade 2 0 2 2 0 5 0 5 Updated Section Configuration and Compile 2 0 2 2 0 5 1 6 Updated Section 4 Ambarella UVC Camera 2 0 2 2 0 6 2 0 Added Section I2C 2 0 2 2 0 6 3 0 Updated Section 1 4 Example Build the Ramdisk System 2 0 2 2 0 7 0 1 1 Added Section CV5x EVK with Analog and Digital MIC Support 2 Updated Section 1 1 POC Setting 2 0 2 2 0 7 2 0 Updated Section 1 1 POC Setting 2 0 2 2 0 7 2 5 Added Section JTAG 2 0 2 2 0 7 2 7 Deleted Section Boot and Upgrade 2 0 2 2 0 9 1 5 Added Section PTP 2 0 2 2 1 0 1 0 Added Section 6 Configure VLAN Function 2 0 2 2 1 0 1 2 Deleted Section in page JTAG 2 0 2 2 1 0 1 7 Updated Section 4 1 Specifications 2 0 2 2 1 0 2 1 Updated Doc Overview USB 2 0 2 2 1 2 1 6 Added Page Temperature 2 0 2 3 0 2 1 6 1 Added Section 4 5 Test uvc-gadget 2 Updated Section 4 1 Specifications 2 0 2 3 0 3 0 7 Updated Section 4 3 Stream Ambarella UVC 2 0 2 3 0 7 2 5 Added Section 6 Boot from Rootfs in SD Card 2 0 2 3 0 7 3 1 Updated Section 4 1 Specifications 2 0 2 3 0 8 1 6 1 Updated Section 4 2 Build the Firmware to Support UVAC 2 Added Section 4 6 USB FunctionFS Device This Document will be organized as below Audio File System NAND EMMC Debugfs USB SD Card WiFi Bluetooth SPI I2C PCI Express Ethernet PTP Miscellaneous JTAG Temperature License Copyright c 2 0 2 4 Ambarella International LP This file and its contents are protected by intellectual property rights including without limitation U.S and/or foreign copyrights This Software is also the confidential and proprietary information of Ambarella International LP and its licensors You may not use reproduce disclose distribute modify or otherwise prepare derivative works of this Software or any portion thereof except pursuant to a signed license agreement or nondisclosure agreement with Ambarella International LP or its authorized affiliates In the absence of such an agreement you agree to promptly notify and return this Software to Ambarella International LP THIS SOFTWARE IS PROVIDED AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF NON-INFRINGEMENT MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL AMBARELLA INTERNATIONAL LP OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT INDIRECT INCIDENTAL SPECIAL EXEMPLARY OR CONSEQUENTIAL DAMAGES INCLUDING BUT NOT LIMITED TO PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES LOSS OF USE DATA OR PROFITS COMPUTER FAILURE OR MALFUNCTION OR BUSINESS INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY WHETHER IN CONTRACT STRICT LIABILITY OR TORT INCLUDING NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE</field>
  </doc>
</add>
