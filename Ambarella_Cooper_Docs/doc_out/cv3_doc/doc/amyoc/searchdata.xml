<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">source</field>
    <field name="name">amyoc_main_page.h</field>
    <field name="url">d0/d1d/amyoc__main__page_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_amyoc_genv</field>
    <field name="url">d1/d20/doc_amyoc_genv.html</field>
    <field name="keywords"></field>
    <field name="text">Environment Parameters Environment Parameters Export environment parameters directly to the shell environment and Makefile Take CV22 Walnut EVK for example Export some environment parameters directly to the shell environment and Makefile Take CV22 Walnut EVK for example Self-defined variables in local.conf Self-defined variables exported in ambaenv.bbclass In Yocto build as environment variables of the host shell cannot be used directly by the BitBake task self-defined environment variables should be exported by the configuration file Environment variables of build system Table 3 1 Environment Variables of Build System Variables Used in Method Description ENV_BUILD_MODE Amba-build Yocto-build Sets compiling mode external is for Amba build yocto is for Yocto build ENV_BUILD_ARCH Amba-build Specifies ARCH of cross compiling for Linux module ENV_BUILD_TOOL Amba-build Specifies the cross compiler prefix ENV_BUILD_JOBS Amba-build Specifes how many CPU cores will be used to compile ENV_TOP_DIR Amba-build Yocto-build Root directory ENV_MAKE_DIR Amba-build Yocto-build Build templates directory ENV_TOOL_DIR Amba-build Yocto-build Build scripts directory ENV_DOWN_DIR Amba-build Download directory of Amba build ENV_CACHE_DIR Amba-build Cache directory of Amba build ENV_MIRROR_URL Amba-build Yocto-build The mirror server URL ENV_TOP_OUT Amba-build Output root directory including compile output installation files images and more ENV_OUT_ROOT Amba-build Compiling output directory when source code and compiled output are separated for cross-compilation ENV_INS_ROOT Amba-build Root directory of installation files for cross-compilation ENV_DEP_ROOT Amba-build Root directory of libraries and header files for searching for cross-compilation ENV_IMG_ROOT Amba-build Output directory of images ENV_CFG_ROOT Amba-build Output directory for global control of compiling system ENV_OUT_HOST Amba-build Compiling output directory when source code and compiled output are separated for native-compilation ENV_INS_HOST Amba-build Root directory of installation files for native-compilation ENV_DEP_HOST Amba-build Root directory of libraries and header files for searching for native-compilation Configure in this directory should not be used directly and the correct way is installing the global configuration to board_config and board_config.h by the board package Modification of Yocto s global configuration will not trigger the recompilation of packages that are dependent on global configuration These packages that are dependent on the board package will be recompiled because the build system has set the recompiling operations forcibly when the global configuration is changed Ambarella board environment variables Table 3 2 Environment Variables of the Ambarella Board Variables Function AMBA_BOARD Board name AMBA_SOC_SERIES System on chip Soc series AMBA_SOC System on chip Soc name AMBA_CPU_ARCH CPU version AMBA_DSP_ARCH Digital signal processor DSP version AMBA_IMG_ARCH 3 A image version AMBA_CAVALRY_ARCH Cavalry version KERNEL_VER Kernel major and minor versions KERNEL_PV Kernel patch version KERNEL_SRC Kernel source patd KERNEL_OUT Kernel output directory Yocto cache Table 3 3 Environment Variables of Yocto Cache Variables Function SSTATE_DIR Cache of final output for Yocto build DL_DIR Storage path of third-party packages that are downloaded by Yocto build SSTATE_MIRRORS Cache network images for final output SOURCE_MIRROR_URL Third-party network images that are download by Yocto build BUILD_CPUS Specify the number of CPUs for compilation For Yocto build if customers want to modify their SSTATE_MIRRORS and SOURCE_MIRROR_URL they should change amba_mirror_url in the ambarella/build/env/common/inc-get-boardinfo.sh not modifying local.conf directly Users can specify the number of CPU for compilation by executing This is valid for both Yocto build and Amba build</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_amyoc_oss</field>
    <field name="url">d1/d51/doc_amyoc_oss.html</field>
    <field name="keywords"></field>
    <field name="text">OSS Source Code Build by Amba Build OSS Source Code Build by Amba Build This script only functions with Amba Build Usage fetch_package.sh method url package fetch_package.sh method url package outdir outname method package download method currently supports four methods tar Use the command curl to download the package and use the command tar to decompress it The package name suffix should end with tar.gz tar.bz2 tar.xz tar and so on zip Use the command curl to download the package and use the command unzip to decompress the package The package name suffix should be end with gz zip and so on git Use the command curl to download the package $package first from the mirror server and then run the command git pull Otherwise use the command git clone to download the package svn Use the command curl to download the package $package first from the mirror server and then run the command svn up Otherwise use the command svn checkout to download the package The command curl will try the mirror URL specified by $ENV_MIRROR_URL first When the outdir and the outname are not specified the package will only be downloaded it will not be copied or decompressed to the output urls The download link and attributes tar zip Ambarella recommends setting md5 for example git Ambarella recommends setting branch tag or rev revision However tag and rev should not be set together for example svn Ambarella recommends setting rev for example package When using the tar or zip methods the package is the saved file name When using the git or svn methods the package is the saved folder name It will be saved under the directory $ENV_DOWN_DIR outdir The directory to extract to or copy to when compiling outname The folder name of the package under outdir fetch_package.sh sync Updates all git and svn packages under the directory $ENV_DOWN_DIR Two packages are created for each patch the patch package and the unpatch package The format of the package name must be source code package name patch- patch ID and source code package name unpatch- patch ID The source code package weakly depends on these two packages The Depend_Names in source code package DEPS statement adds the two packages mentioned above the format can be xxx-patch-xxx|xxx-unpatch-xxx If a virtual dependency rule file is used the format is as VDEPS(choice) xxx-patch-xxx-choice xxx-unpatch-xxx xxx-patch-xxx All patch packages of the source code package share a Makefile The example is as follows PATCH_PACKAGE Source code package name PATCH_TOPATH Source code path PATCH_FOLDER Patch storage path PATCH_NAME_ patch ID Patch name can be multiple patches Example Source code package patching template</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_amyoc_target</field>
    <field name="url">d2/dea/doc_amyoc_target.html</field>
    <field name="keywords"></field>
    <field name="text">Target Build Guidance Target Build Guidance The following steps are using CV22 Walnut EVK as an example users can replace cv22_walnut with other CV2x boardname such as cv25m_pinenut cv2_chestnut Build the cross-toolchain optional Amba build at the top folder using CV22 Walnut EVK as an example Amba build at the board folder ambarella/boards/cv22_walnut Yocto build using CV22 Walnut EVK as an example Environment configuration files for both Amba and Yocto build can be loaded in any SDK subdirectory source xxx/build/env/xxxx-build.env Users can load environment configuration files then select the board by index The ipcam_config will be loaded by default if the configuration file is not specified and config file does not exist in the compiling stage The following steps are using CV5 Timn EVK as an example users can replace cv5_timn with other CV5x boardname such as cv52_crco Build the cross-toolchain optional Amba build at the top folder using CV5 Timn EVK as an example Amba build at the board folder ambarella/boards/cv5_timn Yocto build using CV5 Timn EVK as an example The following steps are using CV3 Dk_mini EVK as an example users can replace cv3_dk_mini with other CV3 boardname such as cv3ad685bub cv2hpcie Build the cross-toolchain optional Amba build at the top folder using CV3 Dk_mini EVK as an example Amba build at the board folder ambarella/boards/cv3_dk_mini Yocto build using CV3 Dk_Mini EVK as an example The following steps are using CV72 Xiezhi EVK as an example users can replace cv72_xiezhi with other CV72 boardname such as cv72_gage Build the cross-toolchain optional Amba build at the top folder using CV72 Xiezhi EVK as an example Amba build at the board folder ambarella/boards/cv72_xiezhi Yocto build using CV72 Xiezhi EVK as an example Commands to configure parameters Table 2 1 Commands to Configure Parameters Comamnds Function make menuconfig Perform menuconfig for software packages including AMBoot make xxx_config Load specific software package config file make xxx_saveconfig Save current config to config file xxx_config make linux_menuconfig Perform menuconfig for Linux kernel make linux_defconfig Apply default configuration for Linux kernel Directory structure of configuration files Example configure Max VIN Channel Number For Cooper Amba build For Cooper Yocto build Building the SDK installer for a standard SDK and populating the SDK image are the features supported by Yocto Poky Users can refer to below note for more information about populating SDK Users must use Yocto Build to enable this function Amba Build does not support this function The sample commands for each chip family are as follows Populate SDK for CV2x using CV22 Walnut EVK as an example Populate SDK for CV5x using CV5 Timn EVK as an example Populate SDK for CV3 using CV3 Dk_mini EVK as an example Populate SDK for CV72 using CV72 Xiezhi EVK as an example Building the SDK installer for extensible SDK bitbake ipcam-image c populate_sdk_ext is not supported here as the recipes in Cooper SDK are using which is not currently supported in sdk_ext by Yocto Poky For more information about populating SDK users can refer to sdk-generation Table 4 1 Other Make Commands Comamnds Function make deps Generate the compilation chain This operation must be performed when a new package is added or an old package is deleted make clean Yocto Build Clean rootfs make clean Amba Build Clean the compiling output but maintain the system s compilation configuration make distclean Clean both the compling output and the system s compilation configuation make package _clean Execute clean operations for the specified package make package deps Generate the dependency graph for the specified package make all-deps Generate the dependency graph for all software packages make sdk_doc Generate Doxgen documents and output them into ambarella/out/doc_out/cv2x make makes Update the Makefile template make time_statistics Amba Build Generate the statistics file for the compiling time of all packages make package Compile the given package The dependency packages will be compiled automatically make package _single Amba Build Compile the given package and do not compile dependency packages make package _ target Amba Build Compile the given target in the specified package dependent packages will be compiled automatically make package _ target _single Amba build Compile the given target in the specified package and do not compile dependent packages bitbake package c task Yocto Build Compile the single task in the specified package make package c target f makefile Yocto build Compile the single target in the specified package the recipe should include include $ THISDIR inc When a target of the package is specified in Amba build it must be declared in Other_Target_Names of the DEPS-statement Targets of a single type exist with dependent packages Commands for building package targets in Yocto build cannot cover all cases For more details take reference from the Yocto official document</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_amyoc_makefile</field>
    <field name="url">d7/d05/doc_amyoc_makefile.html</field>
    <field name="keywords"></field>
    <field name="text">Makefile Templates Makefile Templates Each package must copy templates from the common directory ambarella/build/core to their directory because the package can include internal templates not just the common ones Description In Amba build the function of this template is setting the compiling output directory OUT_PATH and exporting the cross compiling environment ARCH CROSS_COMPILE CC CXX In Yocto build the output directory and cross compiling environment are set and exported by recipe Functions $(call safe_copy,srcs and dst) do safe copy $(call link_hdrs) derive searching path in CFLAGS for header files $(call link_libs) derive searching path in LDFLAGS for linked libraries $(call prepare_sysroot) prepare dependency sysroot in the OUT_PATH directory Variables PACKAGE_NAME package name it should be equal to package name in the DEPS-statement PACKAGE_NAME does not need add suffix of in native-compilation PACKAGE_ID read-only unique package ID the default value is equal to the value of PACKAGE_NAME PACKAGE_ID adds suffix of in native-compilation INSTALL_HDR installing sub-directory under the include folder of header files the default value is equal to the value of PACKAGE_NAME PACKAGE_DEPS depends of the package it will be removed in the future SEARCH_HDRS searching sub-directories under the include folder the default value is equal to the value of PACKAGE_DEPS OUT_PREFIX compiling output directory when source code and compiled output are separated INS_PREFIX root directory of installation files DEP_PREFIX root directory of libraries and header files for searching PATH_PREFIX root directory of host tools for searching OUT_PATH compilation output path EXPORT_HOST_ENV if the package has dependency on native-built packages set it to y BUILD_FOR_HOST if the package is native-compiled set it to y EXPORT_PC_ENV if the package uses pkg-config set it to y PREPARE_SYSROOT if the package uses dependency sysroot under the OUT_PATH directory set it to y LOGOUTPUT the default value is 1 if it is set to space it will print more infomation when using inc.app.mk or inc.cache.mk Example cmake of wrapping cJSON The installation template is suitable for prebuild packages Supported target and corresponding variables to be set install_libs library set to be installed Users are required to configure the variable of library set INSTALL_LIBRARIES that will be installed When inc.app.mk is used to compile applications libraries generated in compiling will be added to the LIB_TARGETS variable INSTALL_LIBRARIES is set to LIB_TARGETS by default The installation directory is INS_PREFIX install_base_libs library set to be installed Users must configure the variable of the library set INSTALL_BASE_LIBRARIES that will be installed This variable s default value is INSTALL_LIBRARIES The installation directory is INS_PREFIX install_bins executable binaries to be installed Users are required to configure the variable of executable binaries INSTALL_BINARIES that will be installed When inc.app.mk is used to compile applications executable binaries generated in compiling will be added to the BIN_TARGETS variable INSTALL_BINARIES is set to BIN_TARGETS by default The installation directory is INS_PREFIX install_base_bins executable binaries to be installed Users are required to configure the variable of executable binaries INSTALL_BASE_BINARIES that will be installed This variable s default value is INSTALL_BINARIES The installation directory is INS_PREFIX install_hdrs header files to be installed Users are required to configure the header file variable INSTALL_HEADERS that will be installed Installing directory is INS_PREFIX INSTALL_HDR install_datas data files to be installed Users are required to configure the data file variable INSTALL_DATAS that will be installed The installation directory is INS_PREFIX install_datas_xxx install_to_dir_xxx install_tofile_xxx data files that are installed to the specified directory Data files to be installed are specified by INSTALL_DATAS_xxx INSTALL_TODIR_xxx INSTALL_TOFILE_xxx The defined values consist of two parts the last item ending with is the target path to be installed the rest are files to be installed install_datas_xxx s installation directory is INS_PREFIX $(last item of INSTALL_DATAS_xxx) install_todir_xxx s installation directory is INS_PREFIX $(last item of INSTALL_TODIR_xxx) install_tofile_xxx s installation directory is INS_PREFIX $(last item of INSTALL_TOFILE_xxx) Examples Makefile to create two empty files testa and testb Tree view of installed files Example board/amba mk Example prebuild/oss/armv8-a/liblua/amba mk The application template is suitable to compile libraries and executable binaries It includes content for inc.env.mk and inc.ins.mk Supported targets LIBA_NAME the static library name in single library compilation The file path of static libraries in compilation will be added into LIB_TARGETS LIBSO_NAME the dynamic library name in single library compilation LIBSO_NAME can be set as LIBRARY_NAME MAJOR_VERSION MINOR_VERSION PATCH_VERSION for example LIBSO_NAME libtest.so 1 2 3 dynamic library will be generated as libtest.so.1.2.3 symbol link libtest.so and libtest.so.1 will also be created LIBSO_NAME libtest.so 1 2 dynamic library will be generated as libtest.so.1.2 symbol link libtest.so and libtest.so.1 will also be created LIBSO_NAME libtest.so 1 dynamic library will be generated as libtest.so.1 symbol link libtest.so will also be created LIBSO_NAME libtest.so dynamic library will be generated as libtest.so and no symbol link will be generated If LIBSO_NAME has a version number the default name will be libxxxx.so.x The default value can be overwritten by specified LDFLAGS For example LDFLAGS Wl soname libxxxx.so The file path of static libraries and symbol links will be added into LIB_TARGETS BIN_NAME the executable binary name in single binary compilation Executable binaries will be added into LIB_TARGETS Functions $ eval $ call add-liba-build name of static library list of source files create the compiling rules of static libraries $ eval $ call add-liba-build name of static library list of source files list of dependent static library paths create the compiling rules of static libraries The contents of dependent static libraries will be appended to the generated static library $ eval $ call add-libso-build name of dynamic library list of source files create the compiling rules of dynamic libraries Dynamic library s name can be set as LIBRARY_NAME MAJOR_VERSION MINOR_VERSION PATCH_VERSION For more details take reference from LIBSO_NAME s description $ eval $ call add-libso-build name of dynamic library list of source files parameters for link create the compiling rules of dynamic libraries with links $ eval $ call add-bin-build name of executable binary list of source files create the compiling rules of executable file $ eval $ call add-bin-build name of executable binary list of source files parameters for link create the compiling rules of the executable files with link parameters $(call extract_obj, name of flag, list of source files, value of flag) add compiling flag for specified source file separately Example $ call set_flags CFLAGS main.c src/read.c src/write.c D_FILE_OFFSET_BITS 6 4 D_LARGEFILE_SOURCE D_LARGEFILE64_SOURCE The functions above are provided because multiple libraries and or executable binaries can be compiled in a Makefile Variables that can be set SRC_PATH directory of source files in the package By default source files of a package are located in root directory Some package source files are placed in SRC Multiple directories of a package s source files can be specified SRC_PATH src1 src2 src3 IGNORE_PATH directories that will be ignored when source files are searched By default directories with names ending in git scripts and output are ignored REG_SUFFIX specifies the suffix source files when they are searched By default source files with suffixes of c cpp and S will be searched Suffixes can be choosen from the environment variables of c CPP_SUFFIX and ASM_SUFFIX CPP_SUFFIX suffixes of C++ source files The default suffixes are cc cp cxx cpp CPP c++ and C ASM_SUFFIX suffixes of assembly source files The default suffixes are S s and asm Example add support of cxx type which is defined in CPP_SUFFIX Example add support of CXX type which has not been defined in CPP_SUFFIX USING_CXX_BUILD_C source files that end with c are compiled by the CXX compiler when this variable is set to y SRCS all source files By default it contains all files end with c cpp and S that are located in SRC_PATH If the user specifies SRCS SRC_PATH can also be set and directories will be added to header searching directories If the user specifies SRCS IGNORE_PATH will be ignored CFLAGS users can set some global compiling flags for the package used for gcc and g++ commands AFLAGS users can set some global assembly flags for the package usedas a command LDFLAGS users can set some global linking flags for packages CFLAGS_xxx.o users can set the compiling flags for specified source files separately AFLAGS_xxx.o users can set the compiling flags for specified assembly files separately DEBUG the compiling parameters of will be used when this variable is set to y Example packages/libmcl/dsp_v5/amba.mk Example unit_test/private/idsp_test/dsp_v5/amba.mk Example unit_test_private/iav_test/dsp_v5/amba.mk The application template is suitable to compile external kernel modules It includes content for inc.env.mk and inc.ins.mk Supported targets for Makefile when KERNELRELEASE is empty modules external kernel modules that will be compiled modules_clean cleans all output of compiling for kernel modules modules_install kernel modules that can be installed The default installation path of external kernel modules is ENV_INS_ROOT symvers_install installs modules.symvers to a specified location this target is dependent on one of install_hdrs Variables that can be set for Makefile when KERNELRELEASE is empty MOD_MAKES users can specify some infomation in this module KERNEL_SRC directory of Linux kernel s source file required KERNEL_OUT directory of compiling output for Linux kernel make O KERN_OUT required when kernel is compiled Supported target for Kbuild when KERNELRELEASE is not empty MOD_NAME module s name can be multiple modules separated by space Variables that can be set for Kbuild when KERNELRELEASE is not empty IGNORE_PATH directories that will be ignored when source files are searched By default directories with name ending in git scripts and output are ignored SRCS all C source files and assembly files By default it contains all files that end with c and S in the current directory ccflags-y asflags-y ldflags-y parameters for compiling assembling and linking respectively Function for Kbuild when KERNELRELEASE is not empty $(call translate_obj, list of source files) transforms names of source files to the standard KBUILD format with the suffix of o $(call extract_obj, name of flag, list of source files, value of flag) adds compiling flag for specified source files separately Example drv_modules/private/video/dsp_v5/amba.mk Example drv_modules/private/video/dsp_v5/Kbuild Example drv_modules/platform/vin/sensors/sony_imx274_mipi/amba.mk Example drv_modules/platform/vin/sensors/sony_imx274_mipi/amba.mk The configuration template is suitable for packages to manage their on Kconfig rather than leaving them in the care of the board Supported targets loadconfig loads default configuration If config does not exist the configuration specified by DEF_CONFIG will load menuconfig graphical user interface GUI configuration tool syncconfig updates config manually then updates config.h cleanconfig cleans configuration files xxx_config selects xxx_config located in CONFIG_SAVE_PATH as the current configuration xxx_saveconfig saves current configuration to CONF_SAVE_PATH s xxx_config xxx_defconfig selects xxx_defconfig located in CONFIG_SAVE_PATH as the current configuration xxx_savedefconfig saves current configuration to CONF_SAVE_PATH s xxx_defconfig The variables that can be set are as follows OUT_PATH directory of compiling s output CONF_SRC directory of source file for the Kconfig tool current is build/kconfig CONF_PATH directory of compiling s output for the Kconfig tool CONF_PREFIX sets variables for running configuration The main two settings are as follows srctree path_name in Kconfig the relative directory of the command to load other configurations is specified by srctree If srctree does not specify the default directory is the one that runs conf mconf CONFIG_ sets the prefix of each item in config and config.h If this variable is not set the default prefix CONFIG_ is used CONFIG_HEADER sets the inclusion macro in config such as _XXX_CONFIG_H__ The default value is __ PACKAGE_NAME _CONFIG_H__ The header file generated by Kconfig does not include This template adds this macro by sed command KCONFIG configuration file for parameters The default is the package s Kconfig file CONF_SAVE_PATH configuration file s directory to fetch and save The default is the package s configuration directory CONF_APPEND_CMD appended commands when the configuration changes Example boot/amboot/build/Makefile For Kconfig usage users can also take reference from build/bin/amba/inc-amba-build.mk and build/bin/yocto/inc-yocto-build.mk For these template make files inc.ins.mk inc.app.mk inc.mod.mk please include them after the target all</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_amyoc_dep</field>
    <field name="url">d7/df0/doc_amyoc_dep.html</field>
    <field name="keywords"></field>
    <field name="text">Generate Dependency Chain Generate Dependency Chain build/bin/amba/inc-amba-build.mk Command items in gen_build_chain.py Table 1 1 Command Items in gen_build_chain.py of Amba Build Items Function m Name of Makefile that was generated automatically in common compiling A top Makefile can be used to include sub Makefiles that was generated automatically Then the all target can call make BUILD_JOBS s MAKEFLAGS all_targets to compile all packages by starting multi-thread The jobserver must be specified before a package can begin in multi-thread compilation k Specifies the file path of all projects in which Kconfig is stored t Specifies the path of the file where the package name and source path list are stored a Specifies the path of the file where the package dependency list is stored d The name of the dependent file to be searched containing the dependency rule statement The dependency file can contain multiple dependencies c Name of configuration file for Kconfig that will be searched Find the configuration file in the same directory as the dependent file In the search process the configuration file with the same suffix as name of package will be searched first and then will search for the configuration file if it cannot be found v The name of virtual dependent file to be searched containing the statements of the virtual dependent rule s Path for searching directories Multiple directories are separated by commas i Directories to be ignored Dependent files in these specified direcotries will not be searched Multiple directories can be specified by commas g Path for searching directories continuously Multiple directories can be specified by commas The current directory s subdirectory will not be searched when has been found or is not specified l Sets the maximum layer of menuconfig w Used for menuconfig If the search path contains this directory layer of this path is reduced by 1 Multiple directories can be specified by commas p Used for menuconfig If no prefix for CONFIG_ is set when the users run conf mconf this flag must set to 1 when the script runs build/bin/yocto/inc-yocto-build.mk Command items in gen_build_chain.py Table 2 1 Command Items in gen_build_chain.py of Yocto Build Items Function k Specifies the file path of all projects in which Kconfig is stored The normal build will also generate a target file in the same directory as Kconfig in which all of a package s file paths names and dependencies are listed t Specifies the path of the file where the package name and source path list are stored c Same of the configuration file for Kconfig that will be searched To search the Kconfig configuration file RECIPE_NAME bbconfig in the current directory has priority to be found If it cannot be found the search path will transfer to what is specified by EXTERNALSRC of the bbappend file In the search process the configuration file with the same suffix as the name of the package will be searched first and then will search for the configuration file if it cannot be found v The name of the virtual dependent file to be searched containing the statements of the virtual dependent rule i Directories to be ignored Dependent files in these specified direcotries will not be searched Multiple directories can be specified by commas l Sets the maximum layer of menuconfig w Used for menuconfig If the search path contains this directory the layer of this path is reduced by 1 Multiple directories can be specified by commas p Used for menuconfig If no prefix of CONFIG_ is set when the users run conf mconf this flag must be set to 1 when the script runs u Specifies the user layer in Yocto Build Multiple layers are separated by commas Only user-level packages perform dependency analysis o Specifies the path in which the package lists are stored Real dependency information format $::DEPS(Makefile_Name) Target_Name(Other_Target_Names) Depend_Names Figure 3-1 Real Dependency Amba Build Dependency information format including sub-path Subdir_Names Figure 3-2 Dependency Information Format Format description Makefile_Name the name of the Makefile to be run by make can be empty The command can specify the Makefile when it runs make f Makefile_Name Makefile must contain three targets all clean and install The name of the Makeifle can include path Searching sub-packages in sub-directories is supported For example test1/ or test2/wrapper.mk can search dependent files in sub-directories continously Recursive is supported For instance test1 test2 Target_Name current package s name ID The keyword ignore is a special package name it indicates that the package will be ignored It is used in searching operation to ignore the certain directory Other_Target_Names other targets of the current package Multiple targets are separated by spaces Targets with names of all install and clean in Other_Target_Names will be ignored The keyword prepare is a special real target which indicates that must be run before performing operation It is generally used to load the default configuration to config when config does not exist The keyword psysroot is a special real target which indicates that must be run before performing operation Then the package uses dependency sysroot under the OUT_PATH instead of ENV_DEP_ROOT ENV_DEP_ROOT directory The keyword release is a special real target which indicates that rootfs uses to install If the release is not defined rootfs will use to install Keyword of union is a special virtual target and multiple packages can share the same Makefile The target names of prepare all install and clean are changed to Target_Name-prepare Target_Name-all Target_Name-install and Target_Name-clean Users can take reference from ambarella/kernel/amba.mk and ambarella/kernel/linux-patch/amba.mk Keyword of cache is a special virtual target that indicates the package uses cache compilation The keyword jobserver is a special virtual target which indicates that multi-thread compilation can be started by executing and adding ENV_BUILD_JOBS to the make command Some packages s Makefile will not add the jobserver target when it includes the make command such as the compilation of the external kernel module Depend_Names dependent packages name ID of the current package Multiple dependencies are separated by spaces If circular dependence exists or dependency is not defined the parsing operation will fail and error information will print on the screen For circular dependency For no definition of dependency The package s name ID Target_Name Depend_Names is a combination of lower-case letters numbers and underscores Other_Target_Names has no such requirement Yocto build dependencies are defined in recipe Table 4 1 Yocto Build Dependencies Items Function DEPENDS Point dependent packages name in the compiling stage Dependent packages of the machine PACKAGE_NAME native may be required to be specified in Yocto such as bash-native RDEPENDS $ PN Point dependent packages name in the running stage Dependent packages with dynamic libraries should be added into this variable Virtual dependency format VDEPS Virtual_Type Target_Name Other_Infos Depend_Names Figure 5-1 Virtual Dependency Regex Format description Virtual_Type required indicates a virtual package s type Four types are now supported menuconfig indicates to generate a menuconfig virtual package All packages in the current directory including sub-directories have strong dependencies on this package config indicates to generate a config virtual package menuchoice indicates to generate a virtual package of choice All packages in the current directory including sub-directories become sub-items of choice choice indicates to generate a virtual package of choice Package lists are under Other_Infos become sub-item of choice Virtual_Name required name of the virtual package Other_infos required for choice type optional for others For all types a path item starting with optional can appear this indicates that it functions on the specified subdirectory not on the current directory For config and choice the path item can be specified with a virtual path for example virtual can be any word where the virtual project is displayed under the current directory not the parent directory For choice package lists separated by spaces will become the choice s sub-item and the first package is the default-selected package For menuchoice default-selected package can be specified Depend_Names optional list of dependent items The usage is basically the same with DEPS-statement such as setting unselect choice and menuchoice Select and imply are not supported A virtual dependency means that the package is not the actual package and will not be compiled Virtual dependencies are only used to organize and manage actual packages The rules for writing and using virtual packages are the same for normal and Yocto compilations indicates that this dependent package is the virtual package with name depname depname can also have the following special characters which will continue to be parsed For instance depname Table 6 1 Special Dependency Keywords Keywords Function finally Indicates that this package is the last to be compiled and is used to generate the file system and images This keyword is only used in strong dependencies for normal compilation unselect Indicates that this package is not compiled default n nokconfig Indicates that this package does not contain Kconfig configuration When there are multiple packages in the same directory the Kconfig file for packages with Kconfig can be set to package_name kconf while packages without Kconfig must be set nokconfig Table 6 2 Special Character Character Function Indicates that this package conflicts with the depname package and they cannot be turned on at the same time depends on depname Indicates that this package selects depname package weakly imply depname When this package is choosen depname can also be selected It can be cancelled manually depname Indicates that this package selects depname package strongly select depname When this package is choosen depname can also be selected It can not be cancelled depname Indicates that this package has weak dependency do not install dynamic library with depname Weak dependency means that the package can be compiled successfully even if the dependent package is not selected or does not exist depname Similar to depname depname indicates that this package has weak dependency dynamic libraries are to be installed with depname depa|depb Indicates that this package has weak dependencies do not install dynamic library with depa depb The package will be compiled successfully when at least one dependent package is selected depa||depb Similar to depa|depb this indicates that the package have weak dependency dynamic libraries are to be installed with depa depb can be combined with and indicates that one package has weak dependency with all real packages Suitable for strongly selecting and has weak dependency with one of the pre-compiled and source packages If the last is omitted the characters between and will be implicitly derived as package_name prebuild- package_name and package_name For example will be implicitly derived as For example indicates that the first existed package will be selected strongly and has weak dependency with the other real packages can be used with and no combination order required It indicates that the package is selected and has weak dependency For example strongly selected and weak dependency weak dependency and weak selected If the word before or was omitted it will be implicitly derived using the pre-compiled package or the source package For example will be derived to prebuild-libtest||libtest For general compilations there is no difference for or For Yocto build the weak dependency of only sets DEPENDS but will set DEPENDS and DEPENDS $ PN at the same time Environment variable Table 6 3 Environment Variable Variable Function ENVNAME val1 val2 Indicates that the value of the environment variable depended upon by this package is equal to val1 or val2 ENVNAME! val1 val2 Indicates that the value of the environment variable depended upon by this package is not equal to val1 and val2 The special dependencies in Yocto are extended by Ambarella In Amba build special dependencies will set the element of Depend_Names in DEPS-statement For Yocto Build they are assigned to EXTRADEPS of Recipe files If a weak dependency exists in EXTRADEPS must be inherited class will parse config config that is used to output the root directory Then it set DEPENDS and DEPENDS $ PN by checking whether or not this item is selected To make it easier for users to clearly find package dependencies Ambarella has added a method to generate a dependency graph the details of the method are shown below gen_depends_image.sh para1 para4 para1 Package name para2 Path to the folder where the graphs are stored para3 List of package names Amba build Path to the file where the package name and dependency list are stored the path specified by a in gen_build_chain.py Yocto build Path to the file where package names and source paths are stored the path specified by t of gen_build_chain.py para4 Configuration file path Instructions for generating graphs Usage make packagename-deps output out_dir top-level output directory Amba Build graph details Table 7 1 Table Line Details Line Meaning Solid lines Strong dependencies Dashed lines Weak dependencies Double line Either prebuild and srcbuild or patch and unpatch Green line The package is already selected in config Red line The package is not selected in config Table 7 2 Box Color Details Box Meaning Green box The package in config is already selected Red box The package is not selected in config Figure 7-1 iav-test Figure 7-2 smartrc3-test Figure 7-3 dewarp-test Figure 7-4 smartfb-test Figure 7-5 eis-test Figure 7-6 cvflow-test Figure 7-7 cv-test Figure 7-8 eazyai-apps-test Figure 7-9 libeazyai-arm-postprocess Figure 7-10 libeazyai Figure 7-11 eazyai-unit-test Figure 7-12 idsp-test Figure 7-13 libimgflow Figure 7-14 libimgalgo Figure 7-15 ipc-imx274-datas Figure 7-16 kernel-module-ambvideo Figure 7-17 kernel-module-ambcavalry Figure 7-18 kernel-module-max9296 Figure 7-19 kernel-module-imx274 Figure 7-20 kernel-module-imx274-mipi-brg Figure 7-21 libgstamba Figure 7-22 libgstnnstreamer Figure 7-23 gstd Figure 7-24 gst-client Figure 7-25 libgstd svg Figure 7-26 libgstc Figure 7-27 prebuild-alsa-plugins Figure 7-28 prebuild-alsa-utils Figure 7-29 prebuild-pulseaudio Instructions for generating graphs Yocto Build graph details Table 8 1 Box Color Details Box Meaning Green box The package in config is already selected Red box The package is not selected in config Blue box Package from communities such as Yocto Figure 8-1 iav-test Figure 8-2 smartrc3-test Figure 8-3 dewarp-test Figure 8-4 smartfb-test Figure 8-5 eis-test Figure 8-6 cvflow-test Figure 8-7 cv-test Figure 8-8 eazyai-apps-test Figure 8-9 libeazyai-arm-postprocess Figure 8-10 libeazyai Figure 8-11 eazyai-unit-test Figure 8-12 idsp-test Figure 8-13 libimgflow Figure 8-14 libimgalgo Figure 8-15 ipc-imx274-datas Figure 8-16 kernel-module-ambvideo Figure 8-17 kernel-module-ambcavalry Figure 8-18 kernel-module-max9296 Figure 8-19 kernel-module-imx274 Figure 8-20 kernel-module-imx274-mipi-brg Figure 8-21 prebuild-alsa-plugins Figure 8-22 prebuild-alsa-utils Figure 8-23 prebuild-pulseaudio</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">amyoc_chapters_page.h</field>
    <field name="url">d8/dd8/amyoc__chapters__page_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_yocto_faq</field>
    <field name="url">d9/de1/doc_yocto_faq.html</field>
    <field name="keywords"></field>
    <field name="text">Yocto FAQ Yocto FAQ Answer As shown below ★★★ Three-star documents are suggested to be mastered well ★★☆ Two-star documents can be mastered basically ★☆☆ One-star documents can be used as reference Getting Started Knowledge Yocto Project Quick Build ★★★ Usage Advice ★★☆ Introducing the Yocto Project ★★☆ Yocto Project Concepts ★★★ Reference Manual Source Directory Structure ★★★ Classes ★☆☆ QA check insane.bbclass ★★☆ Tasks ★★★ Devtool Quick Reference ★☆☆ QA Error and Warning Messages ★★☆ Variables Glossary ★☆☆ Development Manual Board support packages BSP — Developer’s Guide ★★☆ Yocto Project Linux Kernel Development Manual ★★☆ Common Tasks ★★☆ Understanding and Creating Layers ★★★ Customizing Images ★★★ Writing a New Recipe ★★★ Adding a New Machine ★★★ Understanding package ★★★ BitBake User Manual Overview ★★☆ Execution ★☆☆ Syntax and Operators ★★★ File Download Support ★☆☆ Variables Glossary ★☆☆ Answer There is no clear answer which is better but one may be better or worse for use cases for embedded systems Yocto Yocto is more suitable for larger projects because it is widely used and is actively supported by the community with more tools features and open source software OSS packages available Pros Yocto is widely used with many semiconductors This makes it more compatible with a wider number of embedded device boards It is widely and actively supported by the community and has more tools features and OSS packages available Based on its implementation of layers it is much easier for users to integrate their own layers of software packages into the Yocto software development kit SDK provided by the system on chip SoC or board vendors Cons The learning curve is relatively steep when getting started The build time is quite long with super huge temporary files Buildroot Buildroot is more practical for smaller projects because it is built to be simple and quick to deploy especially when compared to Yocto whose learning curve is relatively steep when getting started Pros Buildroot is built to be easy Its core build system is written in Make and is small enough for users to understand quickly The build time is significantly shorter than that of Yocto build Cons Buildroot has less popularity than Yocto which means that it is maintained and supported by a smaller community with a less-active ecosystem There is a lack of incremental builds When users want to make an update even a small change users must rebuild the entire image Buildroot focuses on simplicity which means that it is much harder to customize Users can refer to this link for more comments about the pros and cons of Yocto and Buildroot Answer Yes Customers can download and use Poky directly from the Yocto community Ambarella suggests using 4.0 Kirstone or a higher version For Poky included in the Cooper SDK base package it will be upgraded to Kirstone 4.0.5 Answer Yes but Ambarella suggests using the same kernel version as the SDK In the formal Cooper SDK Ambarella provides the kernel package in the format of linux-5.15.tar.bz2 for example kernel 5.15.76 in the Cooper SDK base package linux-5.15 With linux-5.15 customers can download pure Linux from the community and then apply this patch Answer For Yocto build all OSS including BusyBox use the ones supported by Poky from the community Ambarella only keeps the prebuild ones that are now NOT supported by Poky For Amba build it will keep using prebuild OSS libs Answer Regular compilation uses the host build environment Yocto compiles each package with its own output directory WORKDIR and configures the compilation environment in the output directory $ WORKDIR compiled output directory only for source code and compiled output separately $ WORKDIR system dependencies root folder $ WORKDIR build host software tool root folder $ WORKDIR installation root directory $ WORKDIR directory for storing compiled logs and scripts Yocto copies the required host tools and dependent files to its own working directory and creates a clean shell environment to run tasks Yocto manages the relationships between packages according to certain rules Answer Yocto cannot use the environment variables exported in the shell The environment variables in Yocto are defined in conf/local.conf in the output directory and are exported one by one in the recipe file via export Users can check which variables are exported in the $ WORKDIR do_compile file For more details about exporting variables to the environment refer to the page Answer The main commands are as follows bitbake command bitbake packagename build packagename bitbake c taskname packagename execute the task of packagename bitbake e packagename display the generated task environment script recipetool command recipetool create o xxx.bb src_path generate a recipe based on source code bitbake-layers command bitbake-layers create-layer xxx mv xxx meta-xxx create a new general layer bitbake-layers add-layer meta-xxx add a layer to the current configuration Answer The main configuration files are as follows TOPDIR points to the build directory BitBake automatically sets this variable poky/meta/conf/bitbake.conf default configuration file most variables are defined here $ TOPDIR conf this configuration file contains all local user configurations for the build environment Any variable set here overrides any variable set elsewhere within the environment $ TOPDIR conf the configuration of the layers in the current configuration can be found in this file meta-xxx/conf/layer.conf this configuration file primarily configures how the build system finds the recipe file configurations meta-xxx/conf/machine/xxx.conf machine configuration The layer with the machine configuration is the BSP layer Meanwhile each BSP layer requires at least one machine file Answer For more information refer to the basic syntax page and the conditional syntax page To get the value of a variable users should use braces $ var Unlike in Bourne shells single quotes function identically to double quotes in all other ways They do not suppress variable expansions The operators that define or modify variables are as shown below assign when a variable exists as the value left of the equal sign the variable to the right of the equal sign is the last extension the final value of the variable the variable to the left of the equal sign is the immediate extension the value of the variable at the current position sets the default value assign value only when the variable is empty sets weak defaults parse the statement at the end of the parsing process When the variable is not defined the value is retained and the last is valid when multiple exist Append append prepend Delete remove append post-append the new value is placed after the original value prepend preappend the new value is placed before the original value automatically adds a space between the new value and the original value append prepend does not add a space between the new value and the original value users must add it manually immediately parses append immediately when parsing the current statement append prepend final parsing append when parsing the statement after the parsing process is finished remove removes all existing values multiple values separated by spaces that are the same as the set value Conditions OVERRIDES The condition declaration uses the OVERRIDES keyword only lowercase characters numbers and underscores can be used for condition names multiple conditions are separated by colons OVERRIDES OVERRIDES append Defines or modifies the corresponding variable only when the condition is defined for example var:cond1 append Unset variable unset Define flag var flag_name users can use the brackets var flag_name to define the flag of a variable Defining a new variable s flag can be interpreted as creating a new variable It is similar to treating a variable as an array with the variable name corresponding to the array name and the flag corresponding to the index subscript of the array Task variables have some public flags The operators that define or modify a variable and unset can be used in the variable s flag Answer The four ways to include shared files in Yocto are as shown below Inherited classes inherit and INHERIT Only inherit class files bbclass Inherit can only be used in recipe and class files bb bbappend bbclass INHERIT can only be used in configuration files conf Class files can be retrieved not only in the current layer directory but also in other layer directories defined by BBLAYER variables in the conf/bblayers.conf file BBLAYER variables Include files include and require The included file can be any type of file but Ambarella generally names it inc The include and require directives can be used in any type of file The include directive does not report an error if the file it contains does not exist while the require directive does If file_path is a relative path then the base path is from the BBLAYER variable in the conf/bblayers.conf file to find the first match The recipe file bb can use the THISDIR variable to indicate the directory where the recipe file is located For example include usertask.inc include $ THISDIR inc THISDIR variable Answer Yocto does not support compiling under NFS by default because the compilation speed is slow and there may be permission problems For more information refer to the page Users can disable the NFS checks in the official Poky project to make it compile successfully using the following method however but there is no guarantee that other problems will not occur Answer To understand the role of directories refer to the page Check the Poky configuration file meta/conf/bitbake.conf for detailed definitions of directory variables Answer downloads stores the source code sstate-cache stores the compiled files They can use the variables DL_DIR and SSTATE_DIR to specify the save directory respectively DL_DIR SSTATE_DIR As shown below they are stored in a common location so that all boards can share a resource Answer The first time building firmware through Yocto build usually takes many hours This is because all required aspects including compiler tools and OSS software packages must be downloaded in advance This is quite time-consuming To save time Ambarella suggests establishing the mirror server so that the required tools are only downloaded once and then can be shared with other users Users can follow the directions below to establish the mirror server Copy the downloads and sstate-cache generated by the first build to a specific directory such as mirror Run the HTTP server in the mirror directory for example python m http.server 8 0 8 0 Add a setting to conf/local.conf in the output directory for example Answer The rule that Yocto does not recompile is shown below Check if there is a compiled package with the same timestamp in the local SSTATE_DIR folder if yes there is no requirement to recompile Otherwise check the next For information about recompile refer to the page Check if there is a compiled package with the same timestamp in the SSTATE_MIRRORS folder on the network If so copy the compiled package from the network directly to the local SSTATE_DIR without recompiling Otherwise check the next line Get the source code to compile and copy the compiled package to the local SSTATE_DIR The rule for Yocto to get the source code is shown below If the downloaded source code exists in the local DL_DIR directory with the same hash value unzip it directly from the local directory If the downloaded source code exists in the SORUCE_MIRROR_URL folder on the network with the same hash value download it to the local directory and then decompress Otherwise check the next Download the source code from the SRC_URI link specified in the recipe file if the download fails Download the source code from the official Yocto mirror Answer The Yocto official recipe is used to compile the open source package The cache may cause this error or there may be insufficient system memory causing compilation errors Running clean-up may resolve the issue See the example below error log Solution Answer See Poky s source code for meta/classes/module.bbclass The module class automatically adds the symbol export file Module.symvers of dependent modules to the KBUILD_EXTRA_SYMBOLS variable KBUILD_EXTRA_SYMBOLS Module.symvers contains a list of EXPORT_SYMBOL(func) exported symbols If users do not specify this file for the dependency package the compilation will fail The inc.mod.mk template automatically adds Module.symvers so it is acceptable to name it kernel-module- oe/workdir oe-logs in the source code directory Answer Look for the EXTERNALSRC_SYMLINKS variable EXTERNALSRC_SYMLINKS in the Poky project source code of meta/classes/externalsrc.bbclass and set this variable to null EXTERNALSRC_SYMLINKS in conf/local.conf in the output directory to disable its creation Oe-workdir points to the root directory of the package output $ WORKDIR Oe-logs points to the package output log and script directory $ WORKDIR Answer The Yocto build system requires permissions of the created folder to be at least 7 5 5 and the permissions of the created file to be at least 6 4 4 If the following error occurs check the umask value of the current shell environment configuration Users can run the command to fix the issue For directories the maximum default permission is 7 7 7 for files the maximum default permission is 6 6 6 The initial permissions for files and directories are obtained by calculating the following initial permission maximum default permission umask permission Answer Error log This error occurs because LDFLAGS passes the link parameter Wl hash-style gnu by default but not the compile library without using this link parameter Three solutions are as shown below Compile the dynamic library with the linking parameter Wl hash-style gnu Change the default link parameter to sysv add LINKER_HASH_STYLE to conf/local.conf in the output directory Ignore the error add INSANE_SKIP $ PN to the recipe file For more details regarding the difference between gnu and sysv refer to the page Answer Error log This error occurs beause the release package is packed with symbolic links For more details refer to the page The two solutions are as follows Ignore the error and add INSANE_SKIP $ PN to the recipe file Ambarella Yocto build is the current methods used More detailed descriptions of packaged objects are in the recipe as shown below Answer Error log If LDFLAGS specifies lsonamea when compiling users must add RDEPENDS $ PN to the recipe file If the error persists and the dependent dynamic library is versioned compile the dependent dynamic library with the link parameter Wl soname libxxx.so For more details about link parameters refer to the page Answer Error log This error occurs because the installed executable or dynamic library used the strip command to remove debugging information The user installation file should not run first with the command If the user is unable to rebuild the library the problem can be solved by ignoring the error Add INSANE_SKIP $ PN to the recipe file Answer This error occurs during the do_rootfs task and is caused because a package does not have any output or the output is only header files and or static library files Two solutions are as shown below Ignore the error and add ALLOW_EMPTY $ PN to the recipe file Do not add this error package to the do_rootfs task variable IMAGE_INSTALL append and modify the IGNORES_RECIPES variable in build/bin/yocto/inc-yocto-build.mk Answer Error log The error is caused by the fact that the pathname of the file installed by a package is the same as the pathname of the file installed by other packages Users can only change the file installed by one of the packages Sometimes users use their own recipe to compile open source packages and the Yocto build system also has a default recipe The do_rootfs task may also run with errors For example if users use their own recipe to compile the zlib open source library the do_rootfs task will report the following error Then users can delete the custom recipe and use the official recipe instead Answer If a package is to be recompiled in each build such as in AMBoot the user can use bitbake f packagename to force the build however the following warning will appear WARNING xxx.bb do_build is tainted from a forced run If a package does not require mandatory compilation but requires recompilation each time the user must set the task attribute do_compile nostamp in the recipe file For more information about variable flags refer to the page Answer Users require at least three elements to create a task task function execution directory and task declaration If the task depends on other packages users must also set the dependencies The dirs depends and postfuncs properties are referenced in variable flags where the last directory listed in dirs is used as the task s current working directory The addtask can also be added before run this task before other tasks and after run this task before other tasks instructions Add task to the board s build recipe add the cv25_yocto_config task to load specific Kconfig configuration Answer To save resources Ambarella limits the maximum number of tasks which can run in parallel at any one time Users can speed up a local Yocto build by explicitly modifying or simply deleting the BB_NUMBER_THREADS variable in the script ambarella/build/envyocto-build.env If the user removes this variable in the script file they set this variable to the maximum number of CPUs on the user local build host For more information about the BB_NUMBER_THREADS variable refer to the page For example modify BB_NUMBER_THREADS to 6 4 The value of BB_NUMBER_THREADS should not be greater than the maximum number of CPUs on the user local build host Answer This issue is caused by inability to access the Yocto connectivity URL the check is executed by the function check_connectivity in build/poky/meta/classes/sanity.bbclass Users can directly close this check add CONNECTIVITY_CHECK_URIS to ambarella/out/yocto_out/ board conf Answer Error log This error occurs because the version of meson 0.45.1 used to compile oryxv2 module is too old Following shell script can help users to upgrade meson to a new one Before using the following shell script users must install python3 and python3-pip Answer Error log This error is caused by files permissions users can try this way to fix the issue Then users can re-compile Do not delete out/ but must rerun make ipcam_config before make If this solution does not work users can try another way set the umask value to 0 0 2 2 and pull the code again Follow the steps below to prepare Yocto mirror and sstate-cache After the operations above are completed users can find the cache below out/mirror-cache</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_amyoc_introduction</field>
    <field name="url">da/dab/doc_amyoc_introduction.html</field>
    <field name="keywords"></field>
    <field name="text">Introduction Introduction The build system is developed by Ambarella to support both Amba build and Yocto build Supports both Amba build and Yocto build with unified Makefile on Linux host Also supports wrapping the existing Makefile CMake Autotools Meson into Makefile for the open source packages Supports both cross-compilation and native-compilation supports automatic analysis of header files as compilation dependencies Provides template for compiling static libraries shared libraries and executables inc.app.mk Supports mixed compilation of C c C++ cc cp cxx cpp CPP c++ C and assembly S s asm Provides template for compiling external kernel modules inc.mod.mk Supports mixed compilation of C c and assembly S Provides template for configuring parameters using Kconfig inc.conf.mk kconfig.bbclass Provides script to automatically generate compilation chain Kconfig auto.mk gen_build_chain.py Supports checking the compilation time time_statistics of each package Provides script for configuring Yocto build Kconfig ipcam-image.inc prepare-patch.inc automatically gen_build_chain.py Supports real package rule amba.mk and virtual package rule amba.vdeps virtual package rule can be used to control a set of real package rules Supports automatically generating normal structure config hierarchy menuconfig selection structure choice Supports automatically generating strong dependencies depends on weak dependencies if endif strong selections select weak selections imply Supports prebuild strategy to speed up repeated compilation without building again from source code Enhances patching methods users can choose whether or not to apply the patch exec_patch.sh externalpatch.bbclass Supports generating the dependency graph gen_depends_image.sh Supports downloading packages from internet or mirror server for Amba build fetch_package.sh Supports http git svn methods Supports URL attributes md5 for tar zip branch rev tag for git rev for svn Supports build cache for Amba build it can fetch the cached files from local path or mirror server directly without re-compilation inc.cache.mk process_cache.sh Supports generating cross-compiler toolchain for Amba build toolchain/Makefile process_machine.sh Amba build composition The application and driver are Makefile DEPS-statement The packages are assembled through the dependencies defined by DEPS-statement package name-level dependencies Yocto build composition The application and driver are Makefile Recipe The packages are assembled through the dependencies defined by the Recipe package name-level dependencies DEPS-statement Recipe are required only to define dependencies Compilation is performed entirely by the Makefile Users can enter the package path and click make to compile it Implementation style Makefile Recipe can be freely implemented by developers according to the Make Yocto rules Makefile only requires the three targets all clean and install to be defined and provide templates to simplify the preparation for the Makefile Makefile can also be used to wrap the existing Makefile CMake Autotools Meson implementations of the packages DEPS-statement follows the assembly method of the gen_build_chain.py convention Separate from Amba build the source code compiled scripts and configuration are all independent gen_build_chain.py analyses DEPS-statement and generates the compilation chain file automatically all packages are compiled one by one Kconfig must be placed in the same directory as the DEPS-statement file users are not required to specify the parent-child inclusion relationship manually Instead it is automatically analyzed and assembled by the script Each package is supported to manage its own Kconfig Convenience of Yocto build Users can modify the configuration through make menuconfig select or unselect packages modify configuration and more Build system wraps bitbake commands as make It makes the build flow similar to Amba build for better user experience Table 3 1 Differences Between Two Methods Topic Amba-build Yocto-build Build assembly rules Amba build is assembled by DEPS-statement Yocto build is assembled the Recipe DEPENDS EXTRADEPS Package the root file system Amba build uses shell commands to package the root file system rootfs manually Yocto build uses the bbclass to package rootfs automatically Open oss package Amba build uses a prebuilt-oss compiled by Ambarella Yocto build may download open source packages and compile them by itself such as by using the busybox systemd Top-level output directory The top-level output directory of all packages in Amba build is fixed and the compilation output installation and other directories are fixed Each package in Yocto Build has its own top-level output directory and the compilation output installation and other directories are located in this top-level output directory Dependencies Amba build searches for dependencies in a fixed directory The Poky system is responsible for copying dependencies to the working directory of the current package ENV_INS_ROOT and ENV_DEP_ROOT are not the same directory Environment variables Amba build can export environment variables using the shell The compilation environment of each package of Yocto build is independent from Host shell Environment variables must be exported by recipe which cannot be exported by host shell Compilation tool Amba build uses the host-installed compilation tool Yocto build has its own compilation tool chain Yocto build may be required to specify the host depends DEPENDS SDK directory structure for Amba build Figure 4-1 SDK Directory Structure for Amba Build SDK directory structure for Yocto build Figure 4-2 SDK Directory Structure for Yocto Build Compilation project directory Amba build compiling output directory Yocto build compiling output directory Yocto build directory of compiling scripts</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_amyoc_ros2</field>
    <field name="url">dd/d7c/doc_amyoc_ros2.html</field>
    <field name="keywords"></field>
    <field name="text">ROS2 Image by Yocto Build ROS2 Image by Yocto Build ROS2 image is supported by the Yocto build only Because the size of the ROS2 image is very big the eMMC are usually used to store it Example 1 Build ROS2 Image for CV22 Walnut EVK Example 2 Build ROS2 Image for CV3 Dk_mini EVK CV3 Dk_mini board s storage media is a SPI NOR flash Due to its size limitation the user must prepare a TF card for it to store the ROS2 Image s Rootfs To set up the ROS2 Image perform the following steps Modify the CV3 Dk_mini s device trees DTS file Create a profile for the firmware to be programed to the SPI NOR flash Select the profile above Set the CV3 Dk_mini s Rootfs type to EXT4 Build the ROS2 image The generated firmware path ambarella/out/yocto_out/cv3_dk_mini/firmware/bst_bld_env_dtb_kernel.elf The generated Rootfs path ambarella/out/yocto_out/cv3_dk_mini/images/ros-image-galactic-cv3x-XXXXXX.rootfs.ext4 Prepared a TF card to format it to EXT4 Create partitions on the TF card Reboot the board used to format the TF card to ensure that the settings above take effect Store the ROS2 image s Rootfs to the TF card Put ambarella/out/yocto_out/cv3_dk_mini/images/ros-image-galactic-cv3x-XXXXXX.rootfs.ext4 under CV72 board s folder Insert the TF card into cv3_dk_mini board Flash the generated firmware in step 5 to CV3 DK MINI board using the AmbaUSB program tool Reboot and the Rootfs in TF card will be recognized in device Check ROS2</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">doc_yocto_recipes</field>
    <field name="url">de/d89/doc_yocto_recipes.html</field>
    <field name="keywords"></field>
    <field name="text">Yocto Recipe Yocto Recipe Environment variables can be defined in the class file meta-xxx/classes/xxx.bbclass and inherited by the package recipe file inherit xxx for example ambaenv.bbclass Some common functions and tasks can also be placed in class files such as kconfig.bbclass If the do_setrecompile function is not used the target package will not be recompiled after modifying the configuration file Create a basic recipe recipetool create o xxx.bb The content that the user must add manually is shown below If a package depends on other packages add DEPENDS to the recipes For example DEPENDS If a package links other packages LDFLAGS lname1 lname2 add RDEPENDS to the recipes For example RDEPENDS $ PN The following table lists the main inherited classes and their functions Table 2 1 Inherited Classes Inherited classes Function inherit ambaenv Use Ambarella environment variables inherit kconfig Use menuconfig inherit sanity Compile the application with Makefile inherit cmake Compile the application with cmake inherit module Compile external kernel module inherit native Compile host native tool If menuconfig is compiled by make f wrapper.mk menuconfig users are required to set KCONFIG_CONFIG_COMMAND in the recipes If the directory where config is stored is also the output directory of the Yocto Build users are required to set KCONFIG_CONFIG_PATH in the recipes Variables set for packaging FILES $ PN specifies the list of directories or files that are required to be included in the release package FILES $ PN dev specifies the list of directories or files that must be included in the development package for example header files and static libraries includedir points to xxx/usr/include and base_libdir points to xxx/lib For more information about the Yocto directory refer to meta/conf/bitbake.conf in the poky project It may be necessary to specify properly which files to package rather than which directories in order to avoid overlap between packages for example attaching recipes from official packages Inherit sanity or inherit cmake When using or users must appropriately specify the package directory Otherwise the do_package task will result in an error Inherit module When using the inherit module users are not required to to set the package directory of header and module files If users install other files they should specify the package path of other files Ignore certain warnings and errors ALLOW_EMPTY $ PN ：ignore errors caused by package installation files that are empty or are only header files INSANE_SKIP $ PN ignore the error that the installed file is only a symbolic link For more information refer to Starting from version 3.4 the override style syntax for variables has changed from underline(_) to colon(:) The main role of the recipe append files is to indicate the package source code directory and the Makefile directory which are usually the same EXTERNALSRC the package source code directory The YOCTO build system checks this directory to see if it must be recompiled If only part of the source code exists in the EXTERNALSRC directory then users must append files or directories for verification and append the file-checksums flag of the task otherwise the source code will not be recompiled after modification Users can inherit the class extrasrc.bbclass to perform the appending EXTRASRC_CONFIGURE appends the file or directory for the do_configure task EXTRASRC_COMPILE appends the file or directory that performs the do_compile task EXTRASRC_INSTALL appends the file or directory that performs the do_install task For example append recipes ambarella/metadata/meta-ambalib/recipes-video/libiav-efm/libiav-efm.bbappend In the append recipe file inherit extrasrc must be placed after inherit externalsrc because the externalsrc class overrides file-checksums EXTERNALSRC_BUILD EXTERNALSRC_BUILD specifies the directory where the make command runs which may be different from EXTERNALSRC Create a new folder named recipe name or files in the current directory of the recipe file and place the patch in this folder There are more file folders than those listed above used for patch searching but Ambarella commonly uses a folder named recipe name The recipe simply adds the patch filename declaration without adding the folder path SRC_URI If the recipe inherits from the externalsrc class users must also set RCTREECOVEREDTASKS The externalsrc class removes the do_patch task by default so users must set RCTREECOVEREDTASKS Easy to implement There is no way to determine if the patch is effective By default patching is performed only once If the patch is removed in some special way the patch will not be applied after recompilation This patching method generates a temporary folder in the source directory and applies the patch directly to source code such as through the generation of pc/ or patches/ Create two packages per patch a patching package and a depatching package The recipe names must be in the format of xxx-patch-xxx and xxx-unpatch-xxx The source package weakly depends on these two packages add EXTRADEPS and inherit weakdep Create a virtual dependency rule xxx-patch-xxx-choice xxx-unpatch-xxx xxx-patch-xxx Patch packages write recipes according to the normal rules Note that the recipes depend on the patch host toolkit and inherit the patch status check class inherit externalpatch The role of the externalpatch class is to verify that the patch is applied and thus decide whether or not to patch or force depatch Supports both patching and un-patching Patching and un-patching are guaranteed to function correctly regardless of where the patching un-patching is performed Only the corresponding patch files are modified in the source directory no additional temporary files or folders are generated Patch files can be placed in any directory and can also share a Makefile with other compilation methods Slightly complicated to implement Because the recipe is dynamically modified it must be re-compiled twice when the patch option is changed Reference Linux patching ambarella/metadata/meta-ambabsp/recipes-kernel/linux-patch and ambarella/kernel/linux-patch ambarella/metadata/meta-ambalib/recipes-video/libmcl/libmcl.bb ambarella/metadata/meta-ambaapp/recipes-test/iav-test/iav-test.bb ambarella/metadata/meta-ambalib/recipes-prebuild/prebuild-dewarp/prebuild-dewarp.bb ambarella/metadata/meta-ambabsp/recipes-sensor/kernel-module-imx274-mipi/kernel-module-imx274-mipi.bb The following table lists all the Meta Layers provided by Ambarella Table 6 1 Amba Meta Layers Meta-Layers Location Layer Name More information metadata meta-ambabsp boot board kernel amba private drivers(video, sensors, VP...) meta-ambalib amba private libraries middleware and amba tools(load_ucode, dsplog_cap) meta-ambaapp amba unit test apps demo apps and debug tools meta-ambasecurity software packages and tools about security meta-amrtos software packages of AMRTOS supported by ambarella meta-external external software packages provided by other vendors meta-thirdparty OSS libraries tools and other 3 rd-party prebuild libraries tools The following table lists all the OSS Meta Layers used in the SDK Table 6 2 Oss Meta Layers Meta-Layers Location Layer Name More information build poky oss_yocto meta-openembedded meta-ros meta-selinux Amba won’t change/maintain the source code of Third-Party Meta Layers but only sync the latest update periodically The following table lists the commerial third-party libraries used by some Yocto Build software packages If users have deep concern on the license of these libraries and do not use them in real products they can directly remove the software packages and recipes of these libraries Table 7 1 Commerial Third-Party Libraries Library Software Packages that Depends FFmpeg gstreamer x265 TBD When using open source software OSS packages supported by the Yocto Community there will be cases where a single OSS package contains multiple separated sub-packages The following table lists some common source packages and their sub-packages Table 8 1 Single Package with Multiple Sub-Packages Source Package Sub-Packages PulseAudio pulseaudio-pa-info pulseaudio-server pulseaudio-misc The current software development kit SDK provides convenience for users to easily select the OSS packages through while it can only retrieve the OSS packages that have the same name as its recipe file Once finished with menuconfig an ipcam-image.bb will be generated automatically to add all selected software packages into the build and install queue If a target OSS package has multiple sub-packages its sub-packages that have a different name from the recipe file will not be selected To resolve this issue users can follow the steps to add these sub-packages specifically PulseAudio is used as an example 1 Add the subpackage name to the IMAGE_INSTALL variable in the ipcam-image.bbappend file 2 Add the OSS package name to the DEPENDS variable and add the sub-package name to the RDEPENDS $ PN variable in any recipe file If a target package depends on PulseAudio s subpackages the user can modify the DEPENDS and RDEPENDS $ PN variable in the target package s recipe file Users can also use this method to add other software packages into the current compilation target The following table lists the difference of the BIG OSS modules between Amba Build and Yocto Build Table 9 1 Difference Of Big OSS Modules OSS Amba Build Yocto Build Busybox ambarella/prebuild/oss/ ambarella/build/poky/meta/recipes-core/busybox Systemd ambarella/prebuild/oss/ ambarella/build/poky/meta/recipes-core/systemd ROS2 Not supported ambarella/oss_yocto/meta-ros/meta-ros2-galactic iceoryx ambarella/prebuild/oss/ ambarella/oss_yocto/meta-ros/meta-ros2-galactic/generated-recipes/iceoryx CycloneDDS ambarella/prebuild/oss/ ambarella/oss_yocto/meta-ros/meta-ros2-galactic/generated-recipes/cyclonedds OpenCV4 ambarella/prebuild/oss/ ambarella/oss_yocto/meta-openembedded/meta-oe/recipes-support/opencv FFmpeg Not supported ambarella/build/poky/meta/recipes-multimedia/ffmpeg GStreamer ambarella/prebuild/oss/ ambarella/build/poky/meta/recipes-multimedia/gstreamer PulseAudio ambarella/prebuild/oss/ ambarella/build/poky/meta/recipes-multimedia/pulseaudio ALSA ambarella/prebuild/oss/ ambarella/build/poky/meta/recipes-multimedia/alsa Python3 ambarella/prebuild/oss/ ambarella/build/poky/meta/recipes-devtools/python Flask Not supported ambarella/oss_yocto/meta-openembedded/meta-python/recipes-devtools/python SElinux ambarella/prebuild/oss/ ambarella/oss_yocto/meta-selinux/recipes-security SQLite3 ambarella/prebuild/oss/ ambarella/build/poky/meta/recipes-support/sqlite For Amba Build it uses the prebuild OSSs compiled by Ambarella For Yocto Build it uses the OSSs provided by OSS community</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">index</field>
    <field name="url">index.html</field>
    <field name="keywords"></field>
    <field name="text">Ambarella Build System Document Revision History Updated Date Modification 2 0 2 2 1 1 2 8 Initial Version 2 0 2 2 1 2 1 9 Updated Directory Structure 2 0 2 2 1 2 2 1 Updated Directory Structure 2 0 2 3 0 1 1 2 Updated Section 1 Environment Template inc env mk 2 0 2 3 0 1 1 7 Updated Section 1 Build the Normal Image 2 0 2 3 0 1 3 1 Updated Section Question 15 2 0 2 3 0 1 3 1 1 Updated Section Question 15 2 Added Section 7 Commerial Third-Party Libraries 3 Updated Section 1 Firmware Image 2 0 2 3 0 2 0 9 Updated Section 2 General Make Commands 2 0 2 3 0 2 1 6 1 Updated Page OSS Source Code Build by Amba Build 2 Added Section Question 2 2 0 2 3 0 6 2 7 Added Section Question 30 2 0 2 3 0 6 3 0 Updated Section 3 Description of Environment Variables 2 0 2 3 0 7 0 4 Updated Section 3 Application Template inc app mk 2 0 2 3 0 8 0 3 Updated Page Makefile Templates 2 0 2 3 0 8 1 6 Updated Section 1 Environment Template inc env mk 2 0 2 3 0 9 0 4 Added Section 9 The Difference of Big OSS Modules 2 0 2 3 1 0 1 6 Updated Page Environment Parameters 2 0 2 3 1 2 1 2 Added Page ROS2 Image by Yocto Build 2 0 2 3 1 2 2 6 Updated Directory Structure Cooper Build System Introduction This document provides cooper build system introduction The outline of Introduction is listed as follows Section 1 Main Features Section 2 Architecture Section 3 Differences Between Two Methods Section 4 Directory Structure Target Build Guidance This document provides usage guide about how to build image and make commands The outline of Target Build Guidance is listed as follows Section 1 Firmware Image Section 2 General Make Commands Section 3 Populate SDK Commands Section 4 Other Make Commands Doxygen ROS2 Image by Yocto Build This document provides usage guide about how to build ROS2 image Environment Parameters This document introduces the environment parameters of Cooper Build System The outline of Environment Parameters is listed as follows Section 1 Export Env Parameters for Amba Build Section 2 Export Env Parameters for Yocto Build Section 3 Description of Env Parameters Makefile Templates This document provides usage guide about cooper build system makefile templates The outline of Makefile Templates is listed as follows Section 1 Environment Template: inc.env.mk Section 2 Installation Template: inc.ins.mk Section 3 Application Template: inc.app.mk Section 4 Driver Template: inc.mod.mk Section 5 Configuration Template: inc.conf.mk Generate Dependency Chain This document introduces how to generate dependency chain for each software package The outline of Generate Dependency Chain is listed as follows Section 1 Amba Build Command Option Section 2 Yocto Build Command Option Section 3 Amba Build Regular Dependency Section 4 Yocto Build Regular Dependency Section 5 Virtual Dependency Section 6 Special Dependency Section 7 Amba Build Dependency Graph Section 8 Yocto Build Dependency Graph OSS Source Code Build by Amba Build This document provides usage guide about how to build OSS source code by using Amba-Build The outline of OSS Source Code Build by Amba Build is listed as follows Section 1 Download Packages: fetch_package.sh Section 2 Patch Package: exec_patch.sh Yocto Recipe This document provides yocto recipe usage and introduction The outline of Yocto Recipe is listed as follows Section Section Section Section Section Section Section Section Section Yocto Frequently Asked Questions This document provides Yocto Frequently Asked Questions of Doxygen documents The outline of Yocto FAQ is listed as follows Section Question 1 What are the Yocto official documents to learn Section Question 2 Which is better: Yocto or Buildroot Section Question 3 Can customers download and use Poky from the Yocto community Section Question 4 Can customers download and use the Linux kernel from the community Section Question 5 How does the Cooper SDK Yocto build manage the OSS supported by Yocto Poky Section Question 6 What is the main difference between Yocto compilation and regular compilation Section Question 7 How does Yocto export environment variables Section Question 8 What are the common Yocto commands Section Question 9 Which configuration files should users pay attention to in Yocto build Section Question 1 0 How are variables used in Yocto Section Question 1 1 How can shared files be included in Yocto Section Question 1 2 How does Yocto build function under network file system NFS Section Question 1 3 Where is the Yocto directory structure defined Section Question 1 4 What do downloads and sstate-cache have Section Question 1 5 How can users establish local mirror servers to speed up the build Section Question 1 6 What are the Yocto rules for getting source code and not recompiling Section Question 1 7 How are official open source package compilation errors managed Section Question 1 8 Why does the recipe file name of an external Linux module start with kernel-module- Section Question 1 9 How can the compiler be prevented from creating symlinks Section Question 2 0 How is the error message resolved and managed Section Question 2 1 How is the quality assurance QA issue ldflags resolved Section Question 2 2 How is the QA issue dev-so resolved Section Question 2 3 How is the QA issue file-rdeps resolved Section Question 2 4 How is the QA issue already-stripped resolved Section Question 2 5 How is the error message managed Section Question 2 6 How are errors such as managed Section Question 2 7 How can the recipe be prepared so that the package can be recompiled at each time Section Question 2 8 How are new user-customized tasks created Section Question 2 9 How are local Yocto builds accelerated Section Question 3 0 How is the fetcher issue resolved Section Question 3 1 How is the error message in Ubuntu resolved Section Question 3 2 How is the error message resolved Section Question 3 3 How to prepare Yocto mirror and sstate-cache License Copyright c 2 0 2 4 Ambarella International LP This file and its contents are protected by intellectual property rights including without limitation U.S and/or foreign copyrights This Software is also the confidential and proprietary information of Ambarella International LP and its licensors You may not use reproduce disclose distribute modify or otherwise prepare derivative works of this Software or any portion thereof except pursuant to a signed license agreement or nondisclosure agreement with Ambarella International LP or its authorized affiliates In the absence of such an agreement you agree to promptly notify and return this Software to Ambarella International LP THIS SOFTWARE IS PROVIDED AND ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF NON-INFRINGEMENT MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED IN NO EVENT SHALL AMBARELLA INTERNATIONAL LP OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT INDIRECT INCIDENTAL SPECIAL EXEMPLARY OR CONSEQUENTIAL DAMAGES INCLUDING BUT NOT LIMITED TO PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES LOSS OF USE DATA OR PROFITS COMPUTER FAILURE OR MALFUNCTION OR BUSINESS INTERRUPTION HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY WHETHER IN CONTRACT STRICT LIABILITY OR TORT INCLUDING NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE</field>
  </doc>
</add>
